[
["index.html", "Introduction to Data Science Preface", " Introduction to Data Science Rafael A. Irizarry 2017-11-08 Preface These are the class notes used in the HarvardX Data Science Series. The code to generate the notes are available on GitHub. We will be adding chapters during the next few months. For updates follow @rafalab This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License. "],
["introduction.html", "Chapter 1 Introduction 1.1 Case Studies 1.2 Who Will Find This Book Useful? 1.3 What Does This Book Cover? 1.4 What is Not Covered by This Book?", " Chapter 1 Introduction The demand for skilled data science practitioners in industry, academia, and government is rapidly growing. This book introduces concepts and skills that can help you tackle real-world data analysis challenges. It covers concepts from probability, statistical inference, linear regression and machine learning and helps you develop skills such as R programming, data wrangling with dplyr, data visualization with ggplot2, file organization with UNIX/Linux shell, version control with GitHub, and reproducible document preparation with R markdown. 1.1 Case Studies Throughout the series, we use motivating case studies. For each of the concepts covered, we start by asking a specific question and answer these through data analysis. We learn the concepts as a means to answer the questions. Examples of the case studies included in the book are: Case Study Concept US Murder Rates by State R basics Trends in World Health and Economics Data Visualization The Financial Crisis of 2007-2008 Probability Election Forecasting Statistical Inference Money Ball: Building a Baseball Team Linear Regression Movie Recommendation Systems Machine Learning Throughout the book, we will be using the R software environment for all our analysis. You will learn R, statistical concepts, and data analysis techniques simultaneously. By working through the examples we gain experience in R and packages such as dplyr, ggplot2 and other tidyverse tools. In each case study we try to realistically mimic a data scientist’s experience. In a chapter on Data Wrangling we will demonstrate how we prepared the data for these analysis from its raw form. 1.2 Who Will Find This Book Useful? This book is meant to be a textbook for a first course in Data Science. No previous knowledge of R or statistics is necessary, although we do assume a high level of quantitative ability and some experience with programming. If you possess these skills, read all the chapters and complete all the exercises, you will be well positioned to perform basic data analysis tasks and to take more advanced courses and become an expert. 1.3 What Does This Book Cover? We start by going over the basics of R. You learn R throughout the book, but in the first chapter we go over the building blocks needed to keep learning during the rest of the book. Data visualization is the topic of the following chapter. The growing availability of informative datasets and software tools has led to increased reliance on data visualizations in many fields. We demonstrate how to use ggplot2 to generate graphs and describe important data visualization principles. In the third chapter we introduce probability which is useful in many contexts, in particular those that depend on data affected by chance in some way. As a result, knowledge of probability is indispensable for data science. Probability is also necessary to understand the topic of the next chapter, statistical inference. Here we describe the statistical theory used by election forecasting. In the fifth chapter we provide a brief introduction to the tools we use on a day-to-day basis in data science projects. These are the UNIX/Linux shell, git and GitHub and RStudio. Chapter six goes over several examples to familiarize the reader with data wrangling. Among the specific skills we learn are data import, web scrapping, using regular expressions, and reshaping data. We do this using tidyverse tools. After describing the skills and concepts we are ready to embark on more complex data analysis tasks. In chapter seven we delineate challenges that lead us to describe linear regression and, in chapter 8, challenges that lead us to introduce machine learning. 1.4 What is Not Covered by This Book? This book focuses on the data analysis aspects of data science. We therefore do not cover aspects related to data management or engineering. Although R programming is an essential part of the book, we do not teach more advanced topics such as data structures, optimization, and algorithm theory. Similarly, we do not cover topics such as web services, interactive graphics, parallel computing, and data streaming processing. "],
["introduction-1.html", "Chapter 2 Introduction", " Chapter 2 Introduction In this book we will be using the R software environment for all our analysis. Throughout the book you will learn R and data analysis techniques simultaneously. However, we need to introduce basic R syntax to get you started. In this chapter, rather than cover every R skill you need, we introduce just enough so that you can understand subsequent chapters where we provide more in depth coverage, building upon what you learn in this chapter. We find that we better retain R knowledge when we learn it to solve a specific problem. In this chapter, as done throughout the book, we will use a motivating case study. We ask a specific question related to crime in United States and provide a relevant dataset. Some basic R skills will permit us to answer the motivating question. "],
["motivating-case-study.html", "Chapter 3 Motivating Case Study 3.1 Why R? 3.2 Getting Started 3.3 The R ecosystem", " Chapter 3 Motivating Case Study Imagine you live in Europe and are offered a job in a US company with many locations across all states. It is a great job but news with headlines such as US Gun Homicide Rate Higher Than Other Developed Countries have you worried. Charts like this make you worry even more: Or even worse, this version from everytown.org: But then you remember that the US is a large and diverse country with 50 very different states as well as the District of Columbia (DC). California, for example, has a larger population than Canada and 20 US states have populations larger than that of Norway. In some respects the variability across states in the US is akin to the variability across countries in Europe. Furthermore, although not included in the charts above, the murder rates in Lithuania, Ukraine, and Russia are higher than 4 per 100,000. So perhaps the news reports that worried you are too superficial. You have options of where to live and want to find out how safe each state is. We will gain some insights by examining data related to gun homicides in the US using R. Before we get started with our example, we need to cover logistics as well as some of the very basic building blocks that are required to gain more advanced R skills. Be aware that the usefulness of some of these building blocks may not be immediately obvious, but later in the book you will appreciate having mastered these skills. 3.1 Why R? R is not a programming language like C or Java. It was not created by software engineers for software development. Instead, it was developed by statisticians as an interactive environment for data analysis. You can read the full history here. The interactivity is an indispensable feature in data science because, as you will soon learn, the ability to quickly explore data is a necessity for success in this field. However, like in other programming languages, you can save your work as scripts which can be easily executed at any moment. These scripts serve as a record of the analysis you performed, a key feature that facilitates reproducible work. If you are an expert programmer, you should not expect R to follow the conventions you are used to since you will be disappointed. If you are patient, you will come to appreciate the unequal power of R when it comes to data analysis and data visualization specifically. Other attractive features of R are the following: R is free and open source. It runs across all major platforms: Windows, Mac Os, UNIX/Linux. Scripts and data objects can be shared seamlessly across platforms. There is a large, growing, and active community of R users and, as a result, there are numerous resources for learning and asking questions. It easy for others to contribute add-ons which enables developers to share software implementations of new data science methodologies. This gives R users early access to the latest methods and to tools which are developed for a wide variety of disciplines, including ecology, molecular biology, social sciences, and geography, just to name a few examples. 3.2 Getting Started 3.2.1 Installing R You can download R freely from the Comprehensive R Archive Network (CRAN). It is relatively straightforward, but if you need further help you can try the following resources: Installing R on Windows Installing R on Mac Installing R on Ubuntu If you want to try out R without installing it, you can access a web based console such as R fiddle. 3.2.2 The R console Interactive data analysis usually occurs on the R console that executes commands as you type them. There are several ways to gain access to an R console. One way is to simply start R on your computer. The console looks something like this: As a quick example, try using the console to calculate a 15% tip on a meal that cost $19.71: 0.15 * 19.71 #&gt; [1] 2.96 Note that in this book, grey boxes are used to show R code types into the R console. The symbol #&gt; is used to denote what the R console outputs. 3.2.3 Scripts One of the great advantages of R over point-and-click analysis software is that you can save your work as scripts. You can edit and save these scripts using a text editor. We highly recommend working on an interactive integrated development environment (IDE) such as RStudio, which includes an editor with many R specific features, as well as a console to execute your code, and other useful panes including one to show figures. Note that most web-based R consoles also provide a pane to edit scripts, but not all permit you to save the scripts for later use. 3.2.4 Installing RStudio Instructions on how to install RStudio are here and for Windows we have special instructions here. Once you install RStudio you can simply start RStudio rather than R since that program automatically starts R. But don’t be confused. R is a different piece of software and you can’t run RStudio without first installing R. If you are going to follow along with RStudio as you read this book, you might consider reading the chapter five sections specifically dedicated to RStudio. RStudio includes many useful features other than providing a script editor and you want to familiarize yourself with these. And remember the R scripts used to generate this book can be found on GitHub [ADD LINK]. 3.3 The R ecosystem The functionality provided by a fresh install of R is only a small fraction of what is possible. In fact, we refer to what you get after your first install as base R. The extra functionality comes from add-ons available from developers. There are currently hundreds of these available from CRAN and many others shared via other repositories such as GitHub. However because not everybody needs all available functionality, we instead make different components available via packages. R makes it very easy to install packages from within R. For example, to install the dslabs package which we use to share dataset and code related to this book you would type: install.packages(&quot;dslabs&quot;) In RStudio you can navigate to the Tools tab and select install packages. We can then load the package into our R sessions using the library function: library(dslabs) As you go through this book you will see that we load packages without installing them. This is because once you install a package, it remains installed and only needs to be loaded with library. The package remains loaded until we quit the R session. If you try to load a package and get an error, it probably means you need to install it first. "],
["the-very-basics.html", "Chapter 4 The Very Basics 4.1 Objects 4.2 The Workspace 4.3 Functions 4.4 Other prebuilt objects 4.5 Variable names 4.6 Saving your workspace 4.7 Scripts 4.8 Comments Exercises", " Chapter 4 The Very Basics Before we get started with the motivating dataset we need to cover the very basics of R. 4.1 Objects Suppose a high school student asks us for help solving several quadratic equations of the form \\(ax^2+bx+c = 0\\). The quadratic formula gives us the solutions: \\[ \\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\\,\\, \\mbox{ and } \\frac{-b + \\sqrt{b^2 - 4ac}}{2a} \\] which of course change depending on the values of \\(a\\), \\(b\\), and \\(c\\). One advantage of programming languages is that we can define variables and write expressions with these variables, similar to how we do so in math, but obtain a numeric solution. We will write out general code for the quadratic equation below, but if we are asked to solve \\(x^2 + x -1 = 0\\) then we define: a &lt;- 1 b &lt;- 1 c &lt;- -1 which stores the values to use later. Note that we use &lt;- to assign values to the variables. Note: We can assign using = instead of &lt;- but we recommend against using = to avoid confusion. Copy and paste the code above into your console to define the three variables. Note that R does not print anything when we make this assignment. This means the objects were defined successfully. Had you made a mistake you would have received an error message. To see the value stored in a variable we simply ask R to evaluate a and it shows the stored value: a #&gt; [1] 1 A more explicit way to ask R to show us the value stored in a is using print like this: print(a) #&gt; [1] 1 We use the term object to describe stuff that is stored in R. Variables are examples, but objects can also be more complicated entities such as functions, which are described later. 4.2 The Workspace As we define object in the console, we are actually changing the workspace. You can see all the variables saved in your workspace by typing: ls() #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;fifty_states&quot; #&gt; [5] &quot;murders&quot; In RStudio the Environment tab shows the values We should see a, b, and c. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type x you will receive the following message: Error: object 'x' not found. Now since these values are saved in variables, to obtain a solution to our equation we use the quadratic formula to obtain the answer: (-b + sqrt(b^2 - 4*a*c) ) / ( 2*a ) #&gt; [1] 0.618 (-b - sqrt(b^2 - 4*a*c) ) / ( 2*a ) #&gt; [1] -1.62 4.3 Functions Once you define variables, the data analysis process can usually be described as a series of functions applied to the data. R includes several predefined functions and most of the analysis pipelines we construct make extensive use of these. Note that we already used the install.packages, library, and ls functions. And we used the function sqrt to solve the quadratic equation above. There are many more prebuild functions and even more can be added through packages. These functions do not appear in the workspace because you did not define them, but they are available for immediate use. In general, to evaluate a function we need to uses parentheses. If you type ls the function is not evaluated and instead R shows you the code that defines the function. If you type ls() the function is evaluated and, as seen above, we see objects in the workspace. Unlike ls, most functions require one or more arguments. Here is an example of how we assign object to the argument of the function log. Remember that we defined a to be 1 above: log(8) #&gt; [1] 2.08 log(a) #&gt; [1] 0 You can find out what the function expects and what it does by reviewing the very useful manuals included in R. You can get help by using the help function like this: help(&quot;log&quot;) and for most functions we can use the shorthand: ?log The help file will show you what arguments the function is expecting. For example, log needs x and base to run. However, some arguments are required and others are optional. You can determine which arguments are optional by noting, in the help document, that a default value is assigned with =. Defining these is optional. For example, the base of the function log defaults to base = exp(1) making log the natural log by default. If you want a quick look at the arguments without opening the help system you can type: args(log) #&gt; function (x, base = exp(1)) #&gt; NULL You can change the default values by simply assigning another object: log(8, base = 2) #&gt; [1] 3 Note that we have not been specifying the argument x as such: log(x = 8, base = 2) #&gt; [1] 3 The above code works, but we can save ourselves some typing because, if no argument name is used, R assumes you are entering arguments in the order shown in the help file or by args. So by not using the names, it assumes the arguments are x followed by base: log(8,2) #&gt; [1] 3 If using the arguments’ names, then we can include them in whatever order we want: log(base = 2, x = 8) #&gt; [1] 3 To specify arguments we must use =, and cannot use &lt;-. There are some exceptions to the rule that functions need the parenthesis to be evaluated. Among these, the most commonly used are the arithmetic and relational operators. For example: 2 ^ 3 #&gt; [1] 8 You can see the arithmetic operators by typing: help(&quot;+&quot;) or ?&quot;+&quot; and the relational operators typing help(&quot;&gt;&quot;) or ?&quot;&gt;&quot; 4.4 Other prebuilt objects There are several datasets that are included for users to practice and test out functions. You can see all the available datasets by typing data() This shows you the object name for these datasets. These datasets are objects that can be used by simply typing the name, for example typing co2 will show you Mauna Loa atmospheric CO2 concentration data. Other prebuilt objects are mathematical quantities such as the constant \\(\\pi\\) and \\(\\infty\\) pi #&gt; [1] 3.14 Inf+1 #&gt; [1] Inf 4.5 Variable names Here we used the letters a, b, and c as variable names, but variable names can be almost anything. Some basic rules in R is that they have to start with a letter, can’t contain spaces and we avoid variables that are predefined in R, for example don’t use install.packages as a variable name. Don’t type install.packages &lt;- 2! A nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces. For example, for the quadratic equations we could use something like this: solution_1 &lt;- (-b + sqrt(b^2 - 4*a*c) ) / ( 2*a ) solution_2 &lt;- (-b - sqrt(b^2 - 4*a*c) ) / ( 2*a ) 4.6 Saving your workspace Values remain in the workspace until you end your session or you erase them with the function rm. But workspaces can be saved for later use. In fact, when you quit R, the programs asks you if you want to do this. If you do, the next time you start R, the program will restore the workspace. We actually recommend against saving the workspace this way because as you start working on different projects, it will become harder to keep track of what is saved. Instead we recommend you assign the workspace a specific name. You can do this by using the function save or save.image. To load you use the function load. When saving a workspace we recommend the suffix rda or RData. In RStudio, you can also do this by navigating to the Session tab and Save Workspace as. You can later load it using the Load Workspace options in the same tab. You can read the help pages on save, save.image and load to learn more. 4.7 Scripts To solve another equation such as \\(3x^2 + 2x -1\\) we can copy and paste the code above but this time redefine the variables and recompute the solution: a &lt;- 3 b &lt;- 2 c &lt;- -1 (-b + sqrt(b^2 - 4*a*c) ) / ( 2*a ) (-b - sqrt(b^2 - 4*a*c) ) / ( 2*a ) By creating and saving a script with the code above, we would not need to retype everything each time and instead simply change the variable names. Try writing the script above into an editor and notice how much easier it is to change the variables and receive an answer. 4.8 Comments If a line of R code starts with the symbol # it is not evaluated. We can use this to write reminders of why we wrote a particular code. For example, in the script above we could add ## Code to compute solution to quadratic equation of the form ax^2 + bx + c ## define the variables a &lt;- 3 b &lt;- 2 c &lt;- -1 ## now compute the solution (-b + sqrt(b^2 - 4*a*c) ) / ( 2*a ) (-b - sqrt(b^2 - 4*a*c) ) / ( 2*a ) Exercises What is the sum of the first 100 positive integers? There is a formula that tells us the sum of integers \\(1\\) through \\(n\\). It is \\(n (n-1)/2\\). Define \\(n=100\\) and then use R to compute the sum of \\(1\\) through \\(100\\) using the formula. What is the sum? Now use the same formula to compute the sum of the integers from 1 through 1,000. Look at the result of typing the following code into R: n &lt;- 1000 x &lt;- seq(1, n) sum(x) Based on the result, what do you think the functions seq and sum do? You can use the help system: sum creates a list of numbers and seq adds them up. seq creates a list of numbers and sum adds them up. seq computes the difference between two arguments and sum computes the sum of 1 through 1000. sum always returns the same number In math and programming we say we evaluate a function when we replace the argument with a given number. So if we type sqrt(4), we evaluate the sqrt function. In R you can evaluate a function inside another function. The evaluations happen from the inside out. Use one line of code to compute the log, in base 10, of the square root of 100. Which of the following will always return the numeric value stored in x? You can try out examples and use the help system if you want. log(10^x) log10(x^10) log(exp(x)) exp(log(x, base = 2)) "],
["data-types.html", "Chapter 5 Data types 5.1 Data frames 5.2 Examining an object 5.3 The accessor 5.4 Vectors: numerics, characters, and logical 5.5 Factors 5.6 Lists Exercises", " Chapter 5 Data types Variables in R can be of different types. For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function class helps us determine what type of object we have: a &lt;- 2 class(a) #&gt; [1] &quot;numeric&quot; To work efficiently in R it is important to learn the different types of variables and what we can do with these. 5.1 Data frames Up to now, the variables we have defined are just one number. This is not very useful for storing data. The most common way of storing a dataset in R is in a data frame. Conceptually, we can think of a data frame as a table with rows representing observations and the different variables reported for each observation defining the columns. Data frames are particularly useful for datasets because we can combine different data types into one object. We stored the data for our motivating example in a data frame. You can access this dataset by loading the dslabs library and loading the murders dataset using the data function: library(dslabs) data(murders) To see that this is in fact a data frame we type: class(murders) #&gt; [1] &quot;data.frame&quot; 5.2 Examining an object The function str is useful to find out more about the structure of an object: str(murders) #&gt; &#39;data.frame&#39;: 51 obs. of 5 variables: #&gt; $ state : chr &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ... #&gt; $ abb : chr &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; ... #&gt; $ region : Factor w/ 4 levels &quot;Northeast&quot;,&quot;South&quot;,..: 2 4 4 2 4 4 1 2 2 2 ... #&gt; $ population: num 4779736 710231 6392017 2915918 37253956 ... #&gt; $ total : num 135 19 232 93 1257 ... This tells us much more about the object. We see that the table has 51 rows (50 states plus DC) and five variables. We can show the first six lines using the function head: head(murders) #&gt; state abb region population total #&gt; 1 Alabama AL South 4779736 135 #&gt; 2 Alaska AK West 710231 19 #&gt; 3 Arizona AZ West 6392017 232 #&gt; 4 Arkansas AR South 2915918 93 #&gt; 5 California CA West 37253956 1257 #&gt; 6 Colorado CO West 5029196 65 In this dataset each state is considered an observation and five variables are reported for each state. Before we go any further in answering our original question about different states, let’s learn more aboutthe components of this object. 5.3 The accessor For our analysis we will need to access the different variables represented by columns included in this data frame. To access these variables we use the accessor operator $ in the following way: murders$population #&gt; [1] 4779736 710231 6392017 2915918 37253956 5029196 3574097 #&gt; [8] 897934 601723 19687653 9920000 1360301 1567582 12830632 #&gt; [15] 6483802 3046355 2853118 4339367 4533372 1328361 5773552 #&gt; [22] 6547629 9883640 5303925 2967297 5988927 989415 1826341 #&gt; [29] 2700551 1316470 8791894 2059179 19378102 9535483 672591 #&gt; [36] 11536504 3751351 3831074 12702379 1052567 4625364 814180 #&gt; [43] 6346105 25145561 2763885 625741 8001024 6724540 1852994 #&gt; [50] 5686986 563626 But how did we know to use population? Above, by applying the function str to the object murders, we revealed the names for each of the five variables stored in this table. We can quickly access the variable names using: names(murders) #&gt; [1] &quot;state&quot; &quot;abb&quot; &quot;region&quot; &quot;population&quot; &quot;total&quot; It is important to know that the order of the entries in murders$population preserves the order of the rows in our data table. This will later permit us to manipulate one variable based on the results of another. For example, we will be able to order the state names by the number of murders. Tip: R comes with a very nice auto-complete functionality that saves us the trouble of typing out all the names. Try typing murders$p then hitting the tab key on your keyboard. This functionality and many other useful auto-complete features are availalbe when working in RStudio. 5.4 Vectors: numerics, characters, and logical Note that the object murders$population is not one number, but several. We call these types of objects vectors. A single number is technically a vector, but in general we use vectors to refer to objects with several entries. The function length tells you how many entries are in the vector: pop &lt;- murders$population length(pop) #&gt; [1] 51 This particular vector is numeric since population sizes are numbers: class(pop) #&gt; [1] &quot;numeric&quot; In a numeric vector, every entry must be a number. To store character strings, vectors can also be of class character. For example, the state names are characters: class(murders$state) #&gt; [1] &quot;character&quot; As with numeric vectors, all entries in a character vector need to be a character. Another important type are logical vectors. These must be either TRUE or FALSE. z &lt;- 3 == 2 z #&gt; [1] FALSE class(z) #&gt; [1] &quot;logical&quot; Here the == is a relational operator asking if 3 is equal to 2. Remember that in R, if you just use one = you actually assign. You can see the other relational operators by typing: ?Comparison In future sections you will see how useful relational operators can be. Advanced: Mathematically, the values in pop are integers and there is an integer class in R. However, by default, numbers are assigned class numeric even when they are round integers. For example, class(1) returns numeric. You can turn them into class integer with as.integer(1) or add by adding an L like this: 1L. Note the class by typing: class(1L) 5.5 Factors In the murders dataset we might expect the region to also be a character vector. However it is not: class(murders$region) #&gt; [1] &quot;factor&quot; It is a factor. Factors are useful for storing categorical data. We can notice that there are only 4 regions by using the levels function: levels(murders$region) #&gt; [1] &quot;Northeast&quot; &quot;South&quot; &quot;North Central&quot; &quot;West&quot; So, in the background, R stores these levels as integers and keeps a map to keep track of the labels. This is more memory efficient than storing all the characters. However, factors are also a source of confusion as they can easily be confused with characters, but behave differently in different contexts. Remember that factors and characters sometimes result in different behavior from R and that this is a common source of hard to find bugs in our code. In general, we recommend avoiding factors as much as possible, although they are sometimes necessary to fit models containing categorical data. 5.6 Lists Data frames are a special case of lists. We will cover lists in more detail later, but know that they are useful because you can store any combination of different types. Below is an example of a list we created for you: record #&gt; $name #&gt; [1] &quot;John Doe&quot; #&gt; #&gt; $student_id #&gt; [1] 1234 #&gt; #&gt; $grades #&gt; [1] 95 82 91 97 93 #&gt; #&gt; $final_grade #&gt; [1] &quot;A&quot; class(record) #&gt; [1] &quot;list&quot; We won’t be using lists until later, but you might encounter one in your own exploration of R. For this reason we show you some basics here. As with data frames, you can extract the components of a list with the accessor $. In fact, data frames are a type of list. record$student_id #&gt; [1] 1234 We can also use double brackets like this: record[[&quot;student_id&quot;]] #&gt; [1] 1234 You should get used to the fact that in R there are several ways to do the same thing, in particular accessing entries. Exercises Load the US murders dataset. library(dslabs) data(&quot;murders&quot;) Use the function str to examine the structure of the murders object. We can see that this object is a data frame with 51 rows and five columns. Which of the following best describes the variables represented in this data frame: The 51 states The murder rates for all 50 states and DC The state name, the abbreviation of the state name, the state’s region, and the state’s population and total number of murders for 2010 str shows no relevant information What are the column names used by the data frame for these five variables? Use the accessor $ to extract the state abbreviations and assign them to the object a. What is the class of this object? Now use the square brackets to extract the state abbreviations and assign them to the object b. Use the identical function to determine if a and b are the same. We saw that the regions column stores a factor. You can corroborate this by typing: The function table takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of states per region. "],
["vectors.html", "Chapter 6 Vectors 6.1 Creating vectors 6.2 Names 6.3 Sequences 6.4 Subsetting 6.5 Coercion 6.6 Not Availables (NA) Exercises", " Chapter 6 Vectors In R, the most basic unit available to store data are vectors. As we have seen, complex datasets can usually be broken down into components that are vectors. For example, in a data frame each column is a vector. Here we learn more about this important class. 6.1 Creating vectors We can create vectors using the function c, which stands for concatenate. We use c to concatenate entries in the following way: codes &lt;- c(380, 124, 818) codes #&gt; [1] 380 124 818 We can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names. country &lt;- c(&quot;italy&quot;, &quot;canada&quot;, &quot;egypt&quot;) In R you can also use single quotes: country &lt;- c(&#39;italy&#39;, &#39;canada&#39;, &#39;egypt&#39;) But be careful not to cofuse the single quote ’ with the back quote `. By now you should know that if you type: country &lt;- c(italy, canada, egypt) you receive an error because the variables italy, canada and egypt are not defined: R looks for variables with those names and returns an error. 6.2 Names Sometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two: codes &lt;- c(italy = 380, canada = 124, egypt = 818) codes #&gt; italy canada egypt #&gt; 380 124 818 The object codes continues to be a numeric vector: class(codes) #&gt; [1] &quot;numeric&quot; but with names: names(codes) #&gt; [1] &quot;italy&quot; &quot;canada&quot; &quot;egypt&quot; If the use of strings without quotes looks confusing, know that you can use the quotes as well: codes &lt;- c(&quot;italy&quot; = 380, &quot;canada&quot; = 124, &quot;egypt&quot; = 818) codes #&gt; italy canada egypt #&gt; 380 124 818 There is no difference between this function call and the previous one. This is one of the many ways in which R is quirky compared to other languages. We can also assign names using the names functions: codes &lt;- c(380, 124, 818) country &lt;- c(&quot;italy&quot;,&quot;canada&quot;,&quot;egypt&quot;) names(codes) &lt;- country codes #&gt; italy canada egypt #&gt; 380 124 818 6.3 Sequences Another useful function for creating vectors generates sequences: seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 The first argument defines the start, and the second the end. The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by: seq(1, 10, 2) #&gt; [1] 1 3 5 7 9 If we want consecutive integers, we can use the following shorthand: 1:10 #&gt; [1] 1 2 3 4 5 6 7 8 9 10 When we use these function, R produces integers, not numerics, because they are typically used to index something: class(1:10) #&gt; [1] &quot;integer&quot; However, as soon as we create sequence including non-integer, the class changes: class(seq(1, 10)) #&gt; [1] &quot;integer&quot; class(seq(1, 10, 0.5)) #&gt; [1] &quot;numeric&quot; 6.4 Subsetting We use square brackets to access specific elements of a vector. For the vector codes we defined above, we can access the second element using: codes[2] #&gt; canada #&gt; 124 You can get more than one entry by using a multi-entry vector as an index: codes[c(1,3)] #&gt; italy egypt #&gt; 380 818 The sequences defined above are particularly useful if we want to access, say, the first two elements: codes[1:2] #&gt; italy canada #&gt; 380 124 If the elements have names, we can also access the entries using these names. Below are two examples. codes[&quot;canada&quot;] #&gt; canada #&gt; 124 codes[c(&quot;egypt&quot;,&quot;italy&quot;)] #&gt; egypt italy #&gt; 818 380 6.5 Coercion In general, coercion is an attempt by R to be flexible with data types. When an entry does not match the expected, some of the prebuilt R functions try to guess what was meant before throwing an error. This can also lead to confusion. Failing to understand coercion can drive programmers crazy when attempting to code in R since it behaves quite differently from most other languages in this regard. Let’s learn about it with some examples. We said that vectors must be all of the same type. So if we try to combine, say, numbers and characters, you might expect an error: x &lt;- c(1, &quot;canada&quot;, 3) But we don’t get one, not even a warning! What happened? Look at x and its class: x #&gt; [1] &quot;1&quot; &quot;canada&quot; &quot;3&quot; class(x) #&gt; [1] &quot;character&quot; R coerced the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings &quot;1&quot; and “3”. The fact that not even a warning is issued is an example of how coercion can cause many unnoticed errors in R. R also offers functions to change from one type to another. For example, you can turn numbers into characters with: x &lt;- 1:5 y &lt;- as.character(x) y #&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; And you can turn it back with as.numeric. as.numeric(y) #&gt; [1] 1 2 3 4 5 This function is actually quite useful since datasets that include numbers as character strings are common. 6.6 Not Availables (NA) When a function tries to coerce on type to another and encounters an impossible case, it usually gives us a warning and turns the entry into a special value called an NA for “not available”. For example: x &lt;- c(&quot;1&quot;, &quot;b&quot;, &quot;3&quot;) as.numeric(x) #&gt; Warning: NAs introduced by coercion #&gt; [1] 1 NA 3 R does not have any guesses for what number you want when you type b so it does not try. As a data scientist you will encounter the NA often as they are generally used for missing data, a common problem in real life datasets. Exercises Use the function c to create a vector with the average high temperatures in January for Beijing, Lagos, Paris, Rio de Janeiro, San Juan, and Toronto, which are 35, 88, 42, 84, 81, and 30 degrees Fahrenheit. Call the object temp. Now create a vector with the city names and call the object city. Use the names function and the objects defined in the previous exercises to associate the temperature data with its corresponding city. Use the [ and : operators to access the temperature of the first three cities on the list. Use the [ operator to access the temperature of Paris and San Juan. Use the : operator to create a sequence of numbers \\(12,13,14,\\dots,73\\). Create a vector containing all the positive odd numbers smaller than 100. Create a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6+4/7, 6+8/7, etc.. How many numbers does the list have? Hint: use seq and length. What is the class of the following object a &lt;- seq(1, 10, 0.5)? What is the class of the following object a &lt;- seq(1, 10)? The class of class(a&lt;-1) is numeric not integer. R defaults to numeric and, to force a number, you need to add the letter L. Confirm that the class of 1L is integer. Define the following vector: x &lt;- c(&quot;1&quot;, &quot;3&quot;, &quot;5&quot;) and coerce it to get integers. "],
["sorting.html", "Chapter 7 Sorting 7.1 sort 7.2 order 7.3 max and which.max 7.4 rank 7.5 Beware of recycling Exercise", " Chapter 7 Sorting Now that we have mastered some basic R knowledge, let’s try to gain some insights into the safety of different states in the context of gun murders. 7.1 sort Say we want to rank the states from least to most gun murders. The function sort sorts a vector in increasing order. We can therefore see the largest number of gun murders by typing: library(dslabs) data(murders) sort(murders$total) #&gt; [1] 2 4 5 5 7 8 11 12 12 16 19 21 22 27 #&gt; [15] 32 36 38 53 63 65 67 84 93 93 97 97 99 111 #&gt; [29] 116 118 120 135 142 207 219 232 246 250 286 293 310 321 #&gt; [43] 351 364 376 413 457 517 669 805 1257 However, this does not give us information about which states have which murder totals. For example, we don’t know which state had 1257 murders in 2010. 7.2 order The function order is closer to what we want. It takes a vector as input and returns the vector of indexes that sorts the input vector. This may sound confusing so let’s look at a simple example. We can create a vector and sort it: x &lt;- c(31, 4, 15, 92, 65) sort(x) #&gt; [1] 4 15 31 65 92 Rather than sort the input vector, the function order returns the index that sorts input vector: index &lt;- order(x) x[index] #&gt; [1] 4 15 31 65 92 This is the same output as that returned by sort(x). If we look at this index, we see why it works: x #&gt; [1] 31 4 15 92 65 order(x) #&gt; [1] 2 3 1 5 4 The second and fourth entry of x are the smallest, so order(x) starts with 2. The next smallest is the third entry, so the second entry is 3 and so on. How does this help us order the states by murders? First remember that the entries of vectors you access with $ follow the same order as the rows in the table. So, for example, these two vectors, containing the state names and abbreviations respectively, are matched by their order: murders$state[1:10] #&gt; [1] &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; #&gt; [4] &quot;Arkansas&quot; &quot;California&quot; &quot;Colorado&quot; #&gt; [7] &quot;Connecticut&quot; &quot;Delaware&quot; &quot;District of Columbia&quot; #&gt; [10] &quot;Florida&quot; murders$abb[1:10] #&gt; [1] &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; &quot;CA&quot; &quot;CO&quot; &quot;CT&quot; &quot;DE&quot; &quot;DC&quot; &quot;FL&quot; This means we can now order the state names by their total murders by first obtaining the index that orders the vectors according to murder totals, and then indexing the state names or abbreviation vector: ind &lt;- order(murders$total) murders$abb[ind] #&gt; [1] &quot;VT&quot; &quot;ND&quot; &quot;NH&quot; &quot;WY&quot; &quot;HI&quot; &quot;SD&quot; &quot;ME&quot; &quot;ID&quot; &quot;MT&quot; &quot;RI&quot; &quot;AK&quot; &quot;IA&quot; &quot;UT&quot; &quot;WV&quot; #&gt; [15] &quot;NE&quot; &quot;OR&quot; &quot;DE&quot; &quot;MN&quot; &quot;KS&quot; &quot;CO&quot; &quot;NM&quot; &quot;NV&quot; &quot;AR&quot; &quot;WA&quot; &quot;CT&quot; &quot;WI&quot; &quot;DC&quot; &quot;OK&quot; #&gt; [29] &quot;KY&quot; &quot;MA&quot; &quot;MS&quot; &quot;AL&quot; &quot;IN&quot; &quot;SC&quot; &quot;TN&quot; &quot;AZ&quot; &quot;NJ&quot; &quot;VA&quot; &quot;NC&quot; &quot;MD&quot; &quot;OH&quot; &quot;MO&quot; #&gt; [43] &quot;LA&quot; &quot;IL&quot; &quot;GA&quot; &quot;MI&quot; &quot;PA&quot; &quot;NY&quot; &quot;FL&quot; &quot;TX&quot; &quot;CA&quot; According to the above, California had the most murders. 7.3 max and which.max If we are only interested in the entry with the largest value we can use max for the value: max(murders$total) #&gt; [1] 1257 and which.max for the index of the largest value: i_max &lt;- which.max(murders$total) murders$state[i_max] #&gt; [1] &quot;California&quot; For the minimum we can use min and which.min in the same way. So is California the most dangerous state? In an upccoming section we argue that we should be considering rates not totals. Before doing that we introduce one last order related function: rank 7.4 rank Although not as frequently used as order and sort, the function rank is also related to order and can be useful. For any given vector it returns a vector with the rank of the first entry, second entry, etc., of the input vector. Here is a simple example: x &lt;- c(31, 4, 15, 92, 65) rank(x) #&gt; [1] 3 1 2 5 4 To summarize let’s look at the results of the three functions we have introduced: original sort order rank 31 4 2 3 4 15 3 1 15 31 1 2 92 65 5 5 65 92 4 4 7.5 Beware of recycling Another common source of unnoticed errors in R is the use of recycling. We saw that vectors are added elementwise. So if the vectors don’t match in length it is natural to assume that we should get an error. But we don’t. Notice what happens: x &lt;- c(1,2,3) y &lt;- c(10, 20, 30, 40, 50, 60, 70) x+y #&gt; Warning in x + y: longer object length is not a multiple of shorter object #&gt; length #&gt; [1] 11 22 33 41 52 63 71 We do get a warning but no error. For the output, R has recycled the numbers in x: notice the last digit of numbers in the output. Exercise For these exercises we will use the US murders dataset. Make sure you load it. library(dslabs) data(murders) Use the $ operator to access the population size data and store it the object pop. Then use the sort function to redefine pop so that it is sorted. Finally use the [ operator to report the smallest population size. Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use order instead of sort. We can actually perform the same operation as in the previous exercise using the function which.min. Write one line of code that does this. Now we know how small the smallest state is and we know which row represents it. However, which state is it? Define a variable states to be the state names from the murders data frame. Report the name of the state with the smallest population. You can create a data frame using the data.frame function. Here is a quick example: temp &lt;- c(35, 88, 42, 84, 81, 30) city &lt;- c(&quot;Beijing&quot;, &quot;Lagos&quot;, &quot;Paris&quot;, &quot;Rio de Janeiro&quot;, &quot;San Juan&quot;, &quot;Toronto&quot;) city_temps &lt;- data.frame(name = city, temperature = temp) Use the rank function to determine the population size rank (from smallest to biggest) of each state. Save these ranks in an object called ranks, then create a data frame with the state name and its rank. Call the data frame my_df. Repeat the previous exercise but this time order my_df so that the states are ordered from least populous to most populous. Hint: create an object ind that stores the indexes needed to order the population values. Then use the bracket operator [ to re-order each column in the data frame. The na_example represents a series of counts. You can quickly examine the object using: data(na_example) str(na_example) #&gt; int [1:1000] 2 1 3 2 1 3 1 4 3 2 ... However, when we compute the average we obtain an NA mean(na_example) #&gt; [1] NA The is.na returns a logical vector that tells us which entries are NA. Assign this logical vector to an object called ind and determine how many NAs does na_example have. Now compute the average again, but only for the entries that are not NA. Hint: remember the ! operator. "],
["vector-arithmetics.html", "Chapter 8 Vector arithmetics 8.1 Rescaling 8.2 Two vectors Exercises", " Chapter 8 Vector arithmetics California had the most murders, but does this mean it is the most dangerous state? What if it just has many more people than any other state? We can very quickly confirm that, indeed, California has the largest population: murders$state[which.max(murders$population)] #&gt; [1] &quot;California&quot; with over 37 million inhabitants. It is therefore unfair to compare the totals if we are interested in learning how safe the state is. What we really should be computing is the murders per capita. The reports we describe in the motivating section used murders per 100,000 as the unit. To compute this quantity, the powerful vector arithmetic capabilities of R come in handy. 8.1 Rescaling In R, arithmetic operations on vectors occur element wise. For a quick example suppose we have height in inches: heights &lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70) and want to covert to centimeters. Notice what happens when we multiply heights by 2.54: heights * 2.54 #&gt; [1] 175 157 168 178 178 185 170 185 170 178 It multiplied each element by 2.54. Similarly, if we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this: heights - 69 #&gt; [1] 0 -7 -3 1 1 4 -2 4 -2 1 8.2 Two vectors If we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows: \\[ \\begin{pmatrix} a\\\\ b\\\\ c\\\\ d \\end{pmatrix} + \\begin{pmatrix} e\\\\ f\\\\ g\\\\ h \\end{pmatrix} = \\begin{pmatrix} a +e\\\\ b + f\\\\ c + g\\\\ d + h \\end{pmatrix} \\] The same holds for other mathematical operations, such as -, * and /. This implies that to compute the murder rates we can simply type: murder_rate &lt;- murders$total / murders$population * 100000 Once we do this, we notice that California is no longer near the top of the list. In fact, we can use what we have learned to order the states by murder rate: murders$state[order(murder_rate)] #&gt; [1] &quot;Vermont&quot; &quot;New Hampshire&quot; &quot;Hawaii&quot; #&gt; [4] &quot;North Dakota&quot; &quot;Iowa&quot; &quot;Idaho&quot; #&gt; [7] &quot;Utah&quot; &quot;Maine&quot; &quot;Wyoming&quot; #&gt; [10] &quot;Oregon&quot; &quot;South Dakota&quot; &quot;Minnesota&quot; #&gt; [13] &quot;Montana&quot; &quot;Colorado&quot; &quot;Washington&quot; #&gt; [16] &quot;West Virginia&quot; &quot;Rhode Island&quot; &quot;Wisconsin&quot; #&gt; [19] &quot;Nebraska&quot; &quot;Massachusetts&quot; &quot;Indiana&quot; #&gt; [22] &quot;Kansas&quot; &quot;New York&quot; &quot;Kentucky&quot; #&gt; [25] &quot;Alaska&quot; &quot;Ohio&quot; &quot;Connecticut&quot; #&gt; [28] &quot;New Jersey&quot; &quot;Alabama&quot; &quot;Illinois&quot; #&gt; [31] &quot;Oklahoma&quot; &quot;North Carolina&quot; &quot;Nevada&quot; #&gt; [34] &quot;Virginia&quot; &quot;Arkansas&quot; &quot;Texas&quot; #&gt; [37] &quot;New Mexico&quot; &quot;California&quot; &quot;Florida&quot; #&gt; [40] &quot;Tennessee&quot; &quot;Pennsylvania&quot; &quot;Arizona&quot; #&gt; [43] &quot;Georgia&quot; &quot;Mississippi&quot; &quot;Michigan&quot; #&gt; [46] &quot;Delaware&quot; &quot;South Carolina&quot; &quot;Maryland&quot; #&gt; [49] &quot;Missouri&quot; &quot;Louisiana&quot; &quot;District of Columbia&quot; Exercises Previously we created this data frame: temp &lt;- c(35, 88, 42, 84, 81, 30) city &lt;- c(&quot;Beijing&quot;, &quot;Lagos&quot;, &quot;Paris&quot;, &quot;Rio de Janeiro&quot;, &quot;San Juan&quot;, &quot;Toronto&quot;) city_temps &lt;- data.frame(name = city, temperature = temp) Remake the data frame using the code above, but add a line that converts the temperature from Fahrenheit to Celsius. What is the following sum \\(1+1/2^2 + 1/3^2 + \\dots 1/100^2\\)? Hint: thanks to Euler we know it should be close to \\(\\pi^2/6\\). Compute the per 100,000 murder rate for each state and store it in the object murder_rate. Then compute the average murder rate for the US using the function mean. What is the average? "],
["indexing.html", "Chapter 9 Indexing 9.1 Subsetting with logicals 9.2 Logical operators 9.3 which 9.4 match 9.5 %in% Exercises", " Chapter 9 Indexing R provides a powerful and convenient way of indexing vectors. We can, for example, subset a vector based on properties of another vector. We continue our US murders example to demonstrate: 9.1 Subsetting with logicals We have now calculated the murder rate using: murder_rate &lt;- murders$total / murders$population * 100000 Imagine you are moving from Italy where, according to the ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate. Another powerful feature of R is that we can we can use logicals to index vectors. If we compare a vector to a single number, it actually performs the test for each entry. The following is an example related to the question above: ind &lt;- murder_rate &lt; 0.71 Or if we want to know if its less or equal we can use: ind &lt;- murder_rate &lt;= 0.71 ind #&gt; [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [12] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE #&gt; [34] FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #&gt; [45] FALSE TRUE FALSE FALSE FALSE FALSE FALSE Note that we get back a logical vector with TRUE for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals. murders$state[ind] #&gt; [1] &quot;Hawaii&quot; &quot;Iowa&quot; &quot;New Hampshire&quot; &quot;North Dakota&quot; #&gt; [5] &quot;Vermont&quot; In order to count how many are TRUE, the function sum returns the sum of the entries of a vector and logical vectors get coerced to numeric with TRUE coded as 1 and FALSE as 0. Thus we can count the states using: sum(ind) #&gt; [1] 5 9.2 Logical operators Suppose we like the mountains and we want to move to a safe state in the western region of the country. We want the murder rate to be at most 1. So we want two different things to be true. Here we can use the logical operator and, which in R is represented with &amp;. This operation results in TRUE, only when both logicals are TRUE. To see this consider this example: TRUE &amp; TRUE #&gt; [1] TRUE TRUE &amp; FALSE #&gt; [1] FALSE FALSE &amp; FALSE #&gt; [1] FALSE For our exmaple, we can form two logicals: west &lt;- murders$region == &quot;West&quot; safe &lt;- murder_rate &lt;= 1 and we can use the &amp; to get a vector of logicals that tells us which states satisfy both conditions: ind &lt;- safe &amp; west murders$state[ind] #&gt; [1] &quot;Hawaii&quot; &quot;Idaho&quot; &quot;Oregon&quot; &quot;Utah&quot; &quot;Wyoming&quot; 9.3 which Suppose we want to look up California’s murder rate. For this type of operation, it is convenient to convert vectors of logicals into indexes instead of keeping long vectors of logicals. The function which tells us which entries of a logical vector are TRUE. So we can type: ind &lt;- which(murders$state == &quot;California&quot;) ind #this is the index that matches the California entry #&gt; [1] 5 murder_rate[ind] #&gt; [1] 3.37 9.4 match If instead of just one state we want to find out the murder rates for several, say New York, Florida, and Texas, we can use the function match. This function tells us which indexes of a second vector match each of the entries of a first vector: ind &lt;- match(c(&quot;New York&quot;, &quot;Florida&quot;, &quot;Texas&quot;), murders$state) ind #&gt; [1] 33 10 44 Now we can look at the murder rates: murder_rate[ind] #&gt; [1] 2.67 3.40 3.20 9.5 %in% If rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function %in%. So, say you are not sure if Boston, Dakota and Washington are states, you can find out like this: c(&quot;Boston&quot;, &quot;Dakota&quot;, &quot;Washington&quot;) %in% murders$state #&gt; [1] FALSE FALSE TRUE We will be using %in% often throughout the book. Advanced: There is a connection between match and %in% through which. To see this, notice that the following two lines of code are equivalent: match(c(&quot;New York&quot;, &quot;Florida&quot;, &quot;Texas&quot;), murders$state) #&gt; [1] 33 10 44 which(murders$state%in%c(&quot;New York&quot;, &quot;Florida&quot;, &quot;Texas&quot;)) #&gt; [1] 10 33 44 Exercises Start by loading the library and data. library(dslabs) data(murders) Compute the per 100,000 murder rate for each state and store it in an object called murder_rate. Then use the logical operators to create a logical vector, name it low; that tells us which entries of murder_rate are lower than Now use the results from the previous exercise and the function which to determine the indices of murder_rate associated with values lower than 1. Use the results from the previous exercise to report the names of the states with murder rates lower than 1. Now extend the code from exercise 2 and 3 to report the states in the Northeast with murder rates lower than 1. Hint: use the previously defined logical vector low and the logical operator &amp;. In a previous exercise we computed the murder rate for each rate and the average of these numbers. How many states are below the average? Use the match function to identify the states with abbreviations AK, MI, and IA. Hint: start by defining an index of the entries of murders$abb that match the three abbreviations, then use the [ operator to extract the states. Use the %in% operator to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU ? Extend the code you used in exercise 7 to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index. "],
["basic-data-wrangling.html", "Chapter 10 Basic Data Wrangling 10.1 Adding a column with mutate 10.2 Subsetting with filter 10.3 Selecting columns with select 10.4 The pipe: %&gt;% 10.5 Creating a data frame Exercises", " Chapter 10 Basic Data Wrangling Up to now we have been changing vectors by reordering them and subsetting them through indexing. However, once we start more advanced analyses, we will want to prepare data tables for data analysis. We refer to this task as data wrangling. For this purpose we will introduce the dplyr package which provides intuitive functionality for working with tables. In Chapter 6 we will cover the dplyr package in much more depth. Once you install dplyr you can load it using: library(dplyr) This package introduces functions that perform the most common operations in data wrangling and uses names for these functions that are relatively easy to remember. For example, to change the data table by adding a new column, we use mutate. To filter the data table to a subset of rows, we use filter. Finally, to subset the data by selecting specific columns, we use select. We can also perform a series of operations, for example select and then filter, by sending the results of one function to another using what is called the pipe operator: %&gt;%. Some details are included below. 10.1 Adding a column with mutate We want all the necessary information for our analysis to be included in the data table. So the first task is to add the murder rates to our data frame. The function mutate takes the data frame as a first argument and the name and values of the variable in the second using the convention name = values. So to add murder rates we use: murders &lt;- mutate(murders, rate = total / population * 100000) Note that here we used total and population inside the function, which are objects that are not defined in our workspace. So why do we not get an error? This is one of the main features of dplyr. Function in this package, such mutate, know to look for variables in the data frame provided in the first argument. So in the call to mutate above, total will have the values in murders$total. This approach makes the code much more redable. We can see the new column is added: head(murders) #&gt; state abb region population total rate #&gt; 1 Alabama AL South 4779736 135 2.82 #&gt; 2 Alaska AK West 710231 19 2.68 #&gt; 3 Arizona AZ West 6392017 232 3.63 #&gt; 4 Arkansas AR South 2915918 93 3.19 #&gt; 5 California CA West 37253956 1257 3.37 #&gt; 6 Colorado CO West 5029196 65 1.29 Note: Although we have over-written the original murders object, this does not change the object that loaded with data(murders). If we load the murders data again, the original will over-write our mutated version. 10.2 Subsetting with filter Now suppose that we want to filter the data table to only show the entries for which the murder rate is lower than 0.71. To do this we use the filter function which takes the data table as an argument and then the conditional statement as the next. Like mutate, we can use the unquoted variable names from murders inside the function and it will know we mean the columns and not objects in the workspace. filter(murders, rate &lt;= 0.71) #&gt; state abb region population total rate #&gt; 1 Hawaii HI West 1360301 7 0.515 #&gt; 2 Iowa IA North Central 3046355 21 0.689 #&gt; 3 New Hampshire NH Northeast 1316470 5 0.380 #&gt; 4 North Dakota ND North Central 672591 4 0.595 #&gt; 5 Vermont VT Northeast 625741 2 0.320 10.3 Selecting columns with select Although our data table only has six columns, some data tables include hundreds. If we want to view just a few, we can use the dplyr select function. In the code below we select three columns, assign this to a new object and then filter the new object: new_table &lt;- select(murders, state, region, rate) filter(new_table, rate &lt;= 0.71) #&gt; state region rate #&gt; 1 Hawaii West 0.515 #&gt; 2 Iowa North Central 0.689 #&gt; 3 New Hampshire Northeast 0.380 #&gt; 4 North Dakota North Central 0.595 #&gt; 5 Vermont Northeast 0.320 In the call to select, the first argument, murders, is an object but state, region, and rate are variable names. 10.4 The pipe: %&gt;% We wrote the code above because we wanted to show the three variables for states that have murder rates below 0.71. To do this we defined the intermediate object new_table. In dplyr we can write code that looks more like a description of what we want to do: \\[ \\mbox{original data } \\rightarrow \\mbox{ select } \\rightarrow \\mbox{ filter } \\] For such an operation, we can use the pipe %&gt;%. The code looks like this: murders %&gt;% select(state, region, rate) %&gt;% filter(rate &lt;= 0.71) #&gt; state region rate #&gt; 1 Hawaii West 0.515 #&gt; 2 Iowa North Central 0.689 #&gt; 3 New Hampshire Northeast 0.380 #&gt; 4 North Dakota North Central 0.595 #&gt; 5 Vermont Northeast 0.320 This line of code is equivalent to the two lines of code above. What is going on here? In general, the pipe sends the result of the left side of the pipe to be the first argument of the function on the right side of the pipe. Here is a very simple example: 16 %&gt;% sqrt() #&gt; [1] 4 We can continue to pipe values along: 16 %&gt;% sqrt() %&gt;% log2() #&gt; [1] 2 The above statement is equivalent to log2(sqrt(16)) Remember that the pipe sends values to the first argument so we can define arguments as if the first argument is already defined: 16 %&gt;% sqrt() %&gt;% log(base = 2) #&gt; [1] 2 So when using the pipe with data frames and dplyr we no longer need to specify the required first argument since the dplyr functions we have described all take the data as the first argument. So in the code we wrote: murders %&gt;% select(state, region, rate) %&gt;% filter(rate &lt;= 0.71) murders is the first argument of the select function and the new data frame, formerly new_table, is the first argument of the filter function. 10.5 Creating a data frame It is sometimes useful for us to create our own data frames. You can do this by using the data.frame function: grades &lt;- data.frame(names = c(&quot;John&quot;, &quot;Juan&quot;, &quot;Jean&quot;, &quot;Yao&quot;), exam_1 = c(95, 80, 90, 85), exam_2 = c(90, 85, 85, 90)) grades #&gt; names exam_1 exam_2 #&gt; 1 John 95 90 #&gt; 2 Juan 80 85 #&gt; 3 Jean 90 85 #&gt; 4 Yao 85 90 Warning: By default the function data.frame coerces characters into factors: class(grades$names) #&gt; [1] &quot;factor&quot; To avoid this we use the rather cumbersome argument stringsAsFactors: grades &lt;- data.frame(names = c(&quot;John&quot;, &quot;Juan&quot;, &quot;Jean&quot;, &quot;Yao&quot;), exam_1 = c(95, 80, 90, 85), exam_2 = c(90, 85, 85, 90), stringsAsFactors = FALSE) class(grades$names) #&gt; [1] &quot;character&quot; Exercises Load the dplyr package and the murders dataset. library(dplyr) library(dslabs) data(murders) You can add columns using the dplyr function mutate. This function is aware of the column names and inside the function you can call them unquoted. Like this: murders &lt;- mutate(murders, population_in_millions = population / 10^6) Note that we can write population rather than murders$population. The function mutate knows we are grabing columns from murders. Use the function mutate to add a murders column named rate with the per 100,000 murder rate. Make sure you redefine murders as done in the example code above and remember the murder rate is defined the total divided by the population size times 100,000. Note that if rank(x) gives you the ranks of x from lowest to highest, rank(-x) gives you the ranks from highest to lowest. Use the function mutate to add a column rank containing the rank, from highest to lowest murder rate. Make sure you redeinfe murders. With dplyr we can use select to show only certain columns. For example with this code we would only show the states and population sizes: select(murders, state, population) %&gt;% head() #&gt; state population #&gt; 1 Alabama 4779736 #&gt; 2 Alaska 710231 #&gt; 3 Arizona 6392017 #&gt; 4 Arkansas 2915918 #&gt; 5 California 37253956 #&gt; 6 Colorado 5029196 Use select to show the state names and abbreviations in murders. Just show it, do not define a new object. Hint: You can use select to just show one or more columns like this The dplyr function filter is used to choose specific rows of the data frame to keep. Unlke select which is for columns, filter is for rows. For example you can show just New York row like this: filter(murders, state == &quot;New York&quot;) #&gt; state abb region population total rate #&gt; 1 New York NY Northeast 19378102 517 2.67 You can use other logical vector to filter rows. Use filter to show the top 5 states with the highest murder rates. After we add murder rate and rank, do not change the murders dataset, just show the result. Note that you can filter based on the rank column. We can remove rows using the != operator. For example to remove Florida we would do this: no_florida &lt;- filter(murders, state != &quot;Florida&quot;) Create a new data frame called no_south that removes states from the South region. How many states are in this category? You can use the function nrow for this. We can also use the %in% to filter with dplyr. For example you can see the data from New York and Texas like this: filter(murders, state %in% c(&quot;New York&quot;, &quot;Texas&quot;)) #&gt; state abb region population total rate #&gt; 1 New York NY Northeast 19378102 517 2.67 #&gt; 2 Texas TX South 25145561 805 3.20 Create a new data frame called murders_nw with only the states from the Northeast and the West. How many states are in this category? Suppose you want to live in the Northeast or West and want the murder rate to be less than 1. We want to see the data for the states satisfying these options. Note that you can use logical operators with filter: filter(murders, population &lt; 5000000 &amp; region == &quot;Northeast&quot;) #&gt; state abb region population total rate #&gt; 1 Connecticut CT Northeast 3574097 97 2.714 #&gt; 2 Maine ME Northeast 1328361 11 0.828 #&gt; 3 New Hampshire NH Northeast 1316470 5 0.380 #&gt; 4 Rhode Island RI Northeast 1052567 16 1.520 #&gt; 5 Vermont VT Northeast 625741 2 0.320 Add a murder rate column and a rank column as done before. Create a table, call it my_states, that satisfies both the conditions: it is in the Northeast or West and the murder rate is less than 1. Use select to show only the state name, the rate and the rank. library(dplyr) library(dslabs) data(murders) The pipe %&gt;% can be used to perform operations sequentially without having to define intermediate objects. After redefining murder to include rate and rank. library(dplyr) murders &lt;- mutate(murders, rate = total / population * 100000, rank = (-rate)) in the solution to the previous exercise we did the following: # Created a table my_states &lt;- filter(murders, region %in% c(&quot;Northeast&quot;, &quot;West&quot;) &amp; rate &lt; 1) # Used select to show only the state name, the murder rate and the rank select(my_states, state, rate, rank) #&gt; state rate rank #&gt; 1 Hawaii 0.515 -0.515 #&gt; 2 Idaho 0.766 -0.766 #&gt; 3 Maine 0.828 -0.828 #&gt; 4 New Hampshire 0.380 -0.380 #&gt; 5 Oregon 0.940 -0.940 #&gt; 6 Utah 0.796 -0.796 #&gt; 7 Vermont 0.320 -0.320 #&gt; 8 Wyoming 0.887 -0.887 The pipe %&gt;% permits us to perform both operation sequentially and without having to define an intermediate variable my_states. For example we could have mutated and selected in the same line like this: mutate(murders, rate = total / population * 100000, rank = (-rate)) %&gt;% select(state, rate, rank) #&gt; state rate rank #&gt; 1 Alabama 2.824 -2.824 #&gt; 2 Alaska 2.675 -2.675 #&gt; 3 Arizona 3.630 -3.630 #&gt; 4 Arkansas 3.189 -3.189 #&gt; 5 California 3.374 -3.374 #&gt; 6 Colorado 1.292 -1.292 #&gt; 7 Connecticut 2.714 -2.714 #&gt; 8 Delaware 4.232 -4.232 #&gt; 9 District of Columbia 16.453 -16.453 #&gt; 10 Florida 3.398 -3.398 #&gt; 11 Georgia 3.790 -3.790 #&gt; 12 Hawaii 0.515 -0.515 #&gt; 13 Idaho 0.766 -0.766 #&gt; 14 Illinois 2.837 -2.837 #&gt; 15 Indiana 2.190 -2.190 #&gt; 16 Iowa 0.689 -0.689 #&gt; 17 Kansas 2.208 -2.208 #&gt; 18 Kentucky 2.673 -2.673 #&gt; 19 Louisiana 7.743 -7.743 #&gt; 20 Maine 0.828 -0.828 #&gt; 21 Maryland 5.075 -5.075 #&gt; 22 Massachusetts 1.802 -1.802 #&gt; 23 Michigan 4.179 -4.179 #&gt; 24 Minnesota 0.999 -0.999 #&gt; 25 Mississippi 4.044 -4.044 #&gt; 26 Missouri 5.360 -5.360 #&gt; 27 Montana 1.213 -1.213 #&gt; 28 Nebraska 1.752 -1.752 #&gt; 29 Nevada 3.110 -3.110 #&gt; 30 New Hampshire 0.380 -0.380 #&gt; 31 New Jersey 2.798 -2.798 #&gt; 32 New Mexico 3.254 -3.254 #&gt; 33 New York 2.668 -2.668 #&gt; 34 North Carolina 2.999 -2.999 #&gt; 35 North Dakota 0.595 -0.595 #&gt; 36 Ohio 2.687 -2.687 #&gt; 37 Oklahoma 2.959 -2.959 #&gt; 38 Oregon 0.940 -0.940 #&gt; 39 Pennsylvania 3.598 -3.598 #&gt; 40 Rhode Island 1.520 -1.520 #&gt; 41 South Carolina 4.475 -4.475 #&gt; 42 South Dakota 0.983 -0.983 #&gt; 43 Tennessee 3.451 -3.451 #&gt; 44 Texas 3.201 -3.201 #&gt; 45 Utah 0.796 -0.796 #&gt; 46 Vermont 0.320 -0.320 #&gt; 47 Virginia 3.125 -3.125 #&gt; 48 Washington 1.383 -1.383 #&gt; 49 West Virginia 1.457 -1.457 #&gt; 50 Wisconsin 1.706 -1.706 #&gt; 51 Wyoming 0.887 -0.887 Note that select no longer has a data frame as the first argument. The first argument is assumed to be the result of the operation conducted right before the %&gt;% Repeat the previous exercise, but now instead of creating a new object, show the result and only include the state, rate, and rank columns. Use a pipe %&gt;% to do this in just one line. Now we will make murders the original table one gets when loading using data(murders). Use just one line to create a new data frame, called, my_states that has murder rate and rank column, consider only states in the Northeast or West, which have a murder rate lower than 1 and contain only the state, rate, and rank columns. The line should have four components separated by three %&gt;%. The original dataset murders A call to mutate to add the murder rate and the rank. A call to filter to keep only the states from the Northeast or West and that have a murder rate below 1 A call to select that keeps only the columns with the stata name, the murder rate and the rank. The line should look something like this my_states &lt;- murders %&gt;% mutate something %&gt;% filter something %&gt;% select something. "],
["basic-plots.html", "Chapter 11 Basic plots 11.1 Scatter plots 11.2 Histograms 11.3 Boxplot Exercises", " Chapter 11 Basic plots Exploratory data visualization is perhaps the strength of R. One can quickly go from idea to data to plot with a unique balance of flexibility and ease. For example, Excel may be easier than R, but it is nowhere near as flexible. D3.js may be more flexible and powerful than R, but it takes much longer to generate a plot. Before we focus on data visualization in the next chapter, we first we want to introduce some very basic plotting functions. 11.1 Scatter plots Earlier we inferred that states with larger populations are likely to have more murders. This can be confirmed with an exploratory visualization that plots these two quantities against each other: population_in_millions &lt;- murders$population/10^6 total_gun_murders &lt;- murders$total plot(population_in_millions, total_gun_murders) We can clearly see a relationship. Advanced: For a quick plot that avoids accessing variables twice, we can use the with function: with(murders, plot(population, total)) 11.2 Histograms We will describe histograms as they relate to distribution in the next chapter. Here we will simply note that histograms are a powerful graphical summary of a list of numbers that gives you a general overview of the types of values you have. We can make a histogram of our murder rates by simply typing: hist(murders$rate) We can see that there is a wide range of values with most of them between 2 and 3 and one very extreme case with a murder rate of more than 15: murders$state[which.max(murders$rate)] #&gt; [1] &quot;District of Columbia&quot; 11.3 Boxplot Boxplots will be described in more detail in the next chapter as well. Boxplots provide a more terse summary than histograms, but they are easier to stack with other boxplots. For example, here we can use them to compare the different regions: boxplot(rate~region, data = murders) We can see that the South has larger murder rates than the other three regions. Exercises We made a plot of total murders versus population and noted a strong relationship: not surprisingly states with larger populations had more murders. library(dslabs) data(murders) population_in_millions &lt;- murders$population/10^6 total_gun_murders &lt;- murders$total plot(population_in_millions, total_gun_murders) Keep in mind that many states have populations below 5 million and are bunched up. We may gain further insights from making this plot in the log scale. Transform the variables using the log10 transformation and then plot them. Create a histogram of the state populations. Generate boxplots of the state populations by region. "],
["importing-data.html", "Chapter 12 Importing Data 12.1 read.csv", " Chapter 12 Importing Data In this chapter we used a data set already stored in an R object. A data scientist will rarely have such luck and will have to import data into R from either a file, a database, or other source. We cover this in more detail in Chapter 7. But because it is so common to read data from a file, we will briefly describe the key approach and function, in case you want to use your new knowledge on one of your own datasets. Small datasets such as the one used in this chapter are commonly stored as Excel files. Although there are R packages designed to read Excel (xls) format, you generally want to avoid this format and save files as comma delimited (Comma-Separated Value/CSV) or tab delimited (Tab-Separated Value/TSV/TXT) files. These plain-text formats make it easier to share data since commercial software is not required for working with the data. Paths and the working directory The first step is to find the file containing your data and know its path. When you are working in R it is useful to know your working directory. This is the folder in which R will save or look for files by default. You can see your working directory by typing: getwd() You can also change your working directory using the function setwd. Or you can change it through RStudio by clicking on “Session”. The functions that read and write files (there are several in R) assume you mean to look for files or write files in the working directory. Our recommended approach for beginners will have you reading and writing to the working directory. However, you can also type the full path, which will work independently of the working directory. We have included the US murders data in CSV file as part of the dslabs package. We recommend placing your data in your working directory. Because knowing where packages store files is rather advanced, we provide the following code that finds the directory and copies the file: dir &lt;- system.file(package=&quot;dslabs&quot;) #extracts the location of package filename &lt;- file.path(dir,&quot;extdata/murders.csv&quot;) file.copy(filename, &quot;murders.csv&quot;) #&gt; [1] TRUE You should be able to see the file in your working directory and can check using: list.files() #&gt; [1] &quot;_bookdown.yml&quot; &quot;_common.R&quot; &quot;_output.yml&quot; &quot;book_cache&quot; #&gt; [5] &quot;book_files&quot; &quot;book.bib&quot; &quot;book.Rmd&quot; &quot;dataviz&quot; #&gt; [9] &quot;docs&quot; &quot;dsbook.Rproj&quot; &quot;index.Rmd&quot; &quot;intro&quot; #&gt; [13] &quot;intro.Rmd&quot; &quot;LICENSE&quot; &quot;murders.csv&quot; &quot;packages.bib&quot; #&gt; [17] &quot;preamble.tex&quot; &quot;R&quot; &quot;README.md&quot; &quot;style.css&quot; 12.1 read.csv We are ready to read in the file. There are several functions for reading in tables. Here we introduce one included in base R: dat &lt;- read.csv(&quot;murders.csv&quot;) head(dat) #&gt; state abb region population total #&gt; 1 Alabama AL South 4779736 135 #&gt; 2 Alaska AK West 710231 19 #&gt; 3 Arizona AZ West 6392017 232 #&gt; 4 Arkansas AR South 2915918 93 #&gt; 5 California CA West 37253956 1257 #&gt; 6 Colorado CO West 5029196 65 We can see that we have read in the file. Warning: read.csv automatically converts characters to factors. Note for example that: class(dat$state) #&gt; [1] &quot;factor&quot; You can avoid this using: dat &lt;- read.csv(&quot;murders.csv&quot;, stringsAsFactors = FALSE) class(dat$state) #&gt; [1] &quot;character&quot; With this call the region variable is no longer a factor, but we can easily change this with: dat &lt;- mutate(dat, region = as.factor(region)) Now that we are done with this example we remove the murders.csv file from our working directory file.remove(&quot;murders.csv&quot;) #&gt; [1] TRUE "],
["programming-basics.html", "Chapter 13 Programming basics 13.1 Conditionals expressions 13.2 Defining functions 13.3 For-loops 13.4 Vectorization and Functionals 13.5 map 13.6 Other functions Exercises", " Chapter 13 Programming basics We teach R because it greatly facilitates data analysis, the main topic of this book. By coding in R, we can efficiently perform exploratory data analysis, build data analysis pipelines and prepare data visualization to communicate results. However R is not just a data analysis environment but a programming language. Advanced R programmers can develop complex packages and even improve R itself, but we do not cover advanced programming in this book. Nonetheless, in this section we introduce three key programming concepts: conditional expressions, for-loops and functions. These are not just key building blocks for advanced programming, but are sometimes useful during data analysis. We also provide a list of power functions that we do not cover in the book but are worth exploring since they are powerful tools commonly used by expert data analysts. 13.1 Conditionals expressions Conditional expressions are one of the basic features of programming. They are used for what is called flow control. The most common conditional expression is the if-else statement. In R, we can actually perform quite a bit of data analysis without conditionals. However, they do come up occasionally and once you start writing your own functions and packages, you will need them. Here is a very simple example showing the general structure of an if-else statement. The basic idea is to print the reciprocal of a unless a is 0: a &lt;- 0 if(a!=0){ print(1/a) } else{ print(&quot;No reciprocal for 0.&quot;) } #&gt; [1] &quot;No reciprocal for 0.&quot; Let’s look at one more example using the US murders data frame: Here is a very simple example that tells us which states, if any, have a murder rate lower than 0.5 per 100,000. The if statement protects us from the case in which no state satisfies the condition. ind &lt;- which.min(murder_rate) if(murder_rate[ind] &lt; 0.5){ print(murders$state[ind]) } else{ print(&quot;No state has murder rate that low&quot;) } #&gt; [1] &quot;Vermont&quot; If we try it again with a rate of 0.25 we get a different answer: if(murder_rate[ind] &lt; 0.25){ print(murders$state[ind]) } else{ print(&quot;No state has a murder rate that low.&quot;) } #&gt; [1] &quot;No state has a murder rate that low.&quot; A related function that is very useful is ifelse. This function takes three arguments: a logical and two possible answers. If the logical is TRUE the value in the second argument is returned and if FALSE the value in the third argument is returned. Here is an example: a &lt;- 0 ifelse(a &gt; 0, 1/a, NA) #&gt; [1] NA The function is particularly useful because it works on vectors. It examines each entry of the logical vector and returns elements from the vector provided in the second argument if the entry is TRUE or elements from the vector provided in the third argument if the entry is FALSE. a &lt;- c(0,1,2,-4,5) result &lt;- ifelse(a &gt; 0, 1/a, NA) This table helps us see what happened: a is_a_positive answer1 answer2 result 0 FALSE Inf NA NA 1 TRUE 1.00 NA 1.0 2 TRUE 0.50 NA 0.5 -4 FALSE -0.25 NA NA 5 TRUE 0.20 NA 0.2 Here is an example of how this function can be readily used to replace all the missing values in a vector with zeros: data(na_example) no_nas &lt;- ifelse(is.na(na_example), 0, na_example) sum(is.na(no_nas)) #&gt; [1] 0 Two other useful functions are any and all. The any function takes a vector of logicals and returns TRUE if any of the entries is TRUE. The all function takes a vector of logicals and returns TRUE if all of the entries are TRUE. Here is an example: z &lt;- c(TRUE, TRUE, FALSE) any(z) #&gt; [1] TRUE all(z) #&gt; [1] FALSE 13.2 Defining functions As you become more experienced, you will find yourself needing to perform the same operations over and over. A simple example is computing averages. We can compute the average of a vector x using the sum and length functions: sum(x)/length(x). But because we do this repeatedly, it is much more efficient to write a function that performs this operation. This particular operation is so common that someone already wrote the mean function and it is included in base R. However, you will encounter situations in which the function does not already exist so R permits you to write your own. A simple version of function that computes the average can be defined like this: avg &lt;- function(x){ s &lt;- sum(x) n &lt;- length(x) s/n } Now avg is a function that computes the mean: x &lt;- 1:100 identical(mean(x), avg(x)) #&gt; [1] TRUE Notice that variables defined inside a function are not saved in the workspace. So while we use s and n when we call avg, the values are created and changed only during the call. Here is an illustrative example: s &lt;- 3 avg(1:10) #&gt; [1] 5.5 s #&gt; [1] 3 Note how s is still 3 after we call avg. In general, functions are objects, so we assign them to variable names with &lt;-. The function function tells R you are about to define a function. The general form of a function definition looks like this: my_function &lt;- function(VARIABLE_NAME){ perform operations on VARIABLE_NAME and calculate VALUE VALUE } The functions you define can have multiple arguments as well as default values. For example, we can define a function that computes either the arithmetic or geometric average depending on a user defined variable like this: avg &lt;- function(x, arithmetic = TRUE){ n &lt;- length(x) ifelse(arithmetic, sum(x)/n, prod(x)^(1/n)) } We will learn more about how to create functions through experience as we face more complex tasks. 13.3 For-loops The formula for the sum \\(1+2+\\dots+n\\) is \\(n(n+1)/2\\). What if we weren’t sure that was the right function? How could we check? Using what we learned about functions we can create one that computes the \\(S_n\\): compute_s_n &lt;- function(n){ x &lt;- 1:n sum(x) } Now if we can compute \\(S_n\\) for various vales of \\(n\\), say \\(n=1,\\dots,25\\) how do we do it? Do we write 25 lines of code calling compute_s_n? No, that is what for loops are for in programming. In this case, we are performing exactly the same task over and over and the only thing that is changing is the value of \\(n\\). For loops let us define the range that our variable takes (in our example \\(n=1,\\dots,10\\)), then change the value as you loop and evaluate expression as you loop. Perhaps the simplest example of a for loop is this useless piece of code: for(i in 1:5){ print(i) } #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 And here is the for loop we would write for our \\(S_n\\) example: m &lt;- 25 s_n &lt;- vector(length = m) # create an empty vector for(n in 1:m){ s_n[n] &lt;- compute_s_n(n) } In each iteration \\(n=1\\), \\(n=2\\), etc…, we compute \\(S_n\\) and store it in the \\(n\\)th entry of s_n. Now we can create a plot to search for a pattern: n &lt;- 1:m plot(n, s_n) If you noticed that it appears to be a quadratic, you are on the right track because the formula is \\(n(n+1)/2\\) which we can confirm with a table: #&gt; s_n formula #&gt; 1 1 1 #&gt; 2 3 3 #&gt; 3 6 6 #&gt; 4 10 10 #&gt; 5 15 15 #&gt; 6 21 21 We can also overlay the two results by using the function lines to draw a line over the previously plotted points: plot(n, s_n) lines(n, n*(n+1)/2) 13.4 Vectorization and Functionals Although for-loop are an important concept to understand, in R we rarely use them. As you learn more R you will realize that vectorization is the prefered over for-loops as it results in shorter and clearer code. We already saw examples in the Vector Arithmetic Section. A vectorized function is a function that will apply the same operation on each of the vector. x &lt;- 1:10 sqrt(x) #&gt; [1] 1.00 1.41 1.73 2.00 2.24 2.45 2.65 2.83 3.00 3.16 y &lt;- 1:10 x*y #&gt; [1] 1 4 9 16 25 36 49 64 81 100 No need for for-loops. But not all functions work this way. For instance, the function we just wrote, compute_s_n does not work element-wise since it is expecting a scalar. This piece of code does not run the function on each entry of n: n &lt;- 1:25 compute_s_n(n) Functionals are function that help us apply the same function each entry in a vector, matrix, data frame or list. Here we cover the functional that operates on numeric, logical and character vectors: sapply. This is similar to whatSimilar to what we can do in a The function sapply permits us to perform element-wise operations on any function. Here is how it works: x &lt;- 1:10 sapply(x, sqrt) #&gt; [1] 1.00 1.41 1.73 2.00 2.24 2.45 2.65 2.83 3.00 3.16 Here each element of x is passed on to the function sqrt and the result is returned. These results are concatenated. In this case, the resulting is a vector of the same length as the original x. This implies that the for loop above can be written like this: n &lt;- 1:25 s_n &lt;- sapply(n, compute_s_n) plot(n, s_n) Other functionals are apply, lapply, tapply, mapply,vapply, and replicate. We only use sapply and replicate in this book but we recommend becoming familiar with the others as they can be very useful. 13.5 map Another series of fuctionals are provided by the purrr package. These are similar to sapply but they are somewhat easier to use for begginers in some instance. The general idea is the same library(purrr) n &lt;- 1:25 s_n &lt;- map(n, compute_s_n) One advantage that becomes clear latter is that with the purrr functionals you know what type of object you will get back. This is different with sapply that can return several different types. The map function always returns a list. class(s_n) #&gt; [1] &quot;list&quot; If we want a numeric vector we can instead use s_n &lt;- map_dbl(n, compute_s_n) plot(n, s_n) We will learn other advantages of map in latter chapters. 13.6 Other functions Other functions that are widely used that we will not cover in this book are split, cut, do.call and Reduce. Exercises What will this conditional expression return? x &lt;- c(1,2,-3,4) if(all(x&gt;0)){ print(&quot;A ll Postives&quot;) } else{ print(&quot;Not all positives&quot;) } #&gt; [1] &quot;Not all positives&quot; Which of the following expressions is always FALSE when at least one entry of a logical vector x is TRUE? A. all(x) B. any(x) C. any(!x) D. all(!x) The function nchar tells you how many characters long a character vector is. For example, Write a line of code that assigns to the object new_names the state abbreviation when the state name is longer than 8 characters. Create a function sum_n that for any given value, say \\(n\\), computes the sum of the integers from 1 to n (inclusive). Use the function to determine the sum of integers from 1 to 5,000. Create a function altman_plot that takes two arguments x and y and plots the difference against the sum. After running the code below, what is the value of x? x &lt;- 3 my_func &lt;- function(y){ x &lt;- 5 y+5 } Write a function compute_s_n that for any given \\(n\\) computes the sum \\(S_n = 1^2 + 2^2 + 3^2 + \\dots n^2\\). Report the value of the sum when \\(n=10\\). Now define an empty numerical vector s_n of size 25 using s_n &lt;- vector(&quot;numeric&quot;, 25) and store in the results of \\(S_1, S_2, \\dots S_{25}\\) using a for-loop. Repeat exercise 8 but this time use sapply. Repeate exercise 8 but this time use map_dbl. Plot \\(S_n\\) versus \\(n\\). Use points defined by \\(n=1,\\dots,25\\). Confirm that the formula for this sum is \\(S_n= n(n+1)(2n+1)/6\\). "],
["matrices.html", "Chapter 14 Matrices 14.1 Accessing matrix values", " Chapter 14 Matrices Matrices are another type of object that are common in R. Matrices are similar to data frames in that they are two dimensional: they have rows and columns. However, like numeric, character and logical vectors, entries in a matrices have to be all the same type. For this reason data frames are much more useful for storing data, since we can have characters, factors and numbers in them. However, matrices have a major advantage over data frames and it’s that we can perform a very powerful type of mathematics operations with them called matrix algebra. We do not describe these operations in this book, but much of what happens in the background when you perform a data analysis involves matrices. For this reason, and other reasons, some of the functions we will learn return matrices so we describe them briefly here. One way matrices show up is if a function called with sapply returns two or more values. For example suppose we write a function that for any number x returns x, x^2 and x^3: cubic &lt;- function(x) { c(x, x^2, x^3) } cubic(2) #&gt; [1] 2 4 8 If we use sapply to compute these three numbers for each of the elements in a vector, R automatically binds the results as columns in a matrix: n &lt;- seq(1,5) mat &lt;- sapply(n, cubic) mat #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 1 2 3 4 5 #&gt; [2,] 1 4 9 16 25 #&gt; [3,] 1 8 27 64 125 14.1 Accessing matrix values You can access specific entries in a matrix using [. If you want the second row, third column you use mat[2,3] #&gt; [1] 9 If you want the entire second row, you leave the column spot empty: mat[2, ] #&gt; [1] 1 4 9 16 25 Note that this returns a vector, not a matrix. Similarly, if you want the entire third column you leave the row spot entry: mat[ ,3] #&gt; [1] 3 9 27 This is also a vector, not a matrix. You can access more than one column or more than one row if you want. This will give you a new matrix. mat[ ,2:4] #&gt; [,1] [,2] [,3] #&gt; [1,] 2 3 4 #&gt; [2,] 4 9 16 #&gt; [3,] 8 27 64 You can subset both rows and columns: mat[1:2,2:4] #&gt; [,1] [,2] [,3] #&gt; [1,] 2 3 4 #&gt; [2,] 4 9 16 In some of our examples we will convert matrices into data frames so that we can, for example, use them with dplyr. For this we can use the function as.data.frame as.data.frame(mat) #&gt; V1 V2 V3 V4 V5 #&gt; 1 1 2 3 4 5 #&gt; 2 1 4 9 16 25 #&gt; 3 1 8 27 64 125 Note you can also use the [ to access rows and columns of a data frame: data(&quot;murders&quot;) murders[25, 1] #&gt; [1] &quot;Mississippi&quot; murders[2:3, ] #&gt; state abb region population total #&gt; 2 Alaska AK West 710231 19 #&gt; 3 Arizona AZ West 6392017 232 "],
["introduction-2.html", "Chapter 15 Introduction", " Chapter 15 Introduction Looking at the numbers and character strings that define a dataset is rarely useful. To convince yourself, print and stare at the US murders data table: #&gt; state abb region population total #&gt; 1 Alabama AL South 4779736 135 #&gt; 2 Alaska AK West 710231 19 #&gt; 3 Arizona AZ West 6392017 232 #&gt; 4 Arkansas AR South 2915918 93 #&gt; 5 California CA West 37253956 1257 #&gt; 6 Colorado CO West 5029196 65 What do you learn from staring at this table? How quickly can you determine which states have the largest populations? Which states have the smallest? How large is a typical state? Is there a relationship between population size and total murders? How do murder rates vary across regions of the country? For most human brains it is quite difficult to extract this information just from looking at the numbers. In contrast, the answer to all the questions above are readily available from examining this plot: Figure 15.1: Murder totals versus population size by state. We are reminded of the saying “a picture is worth a thousand words”. Data visualization provides a powerful way to communicate a data-driven finding. In some cases, the visualization is so convincing that no follow-up analysis is required. The growing availability of informative datasets and software tools has led to increased reliance on data visualizations across many industries, academia, and government. A salient example is news organizations, which are increasingly embracing data journalism and including effective infographics as part of their reporting. A particularly effective example is a Wall Street Journal article showing data related to the impact of vaccines on battling infectious diseases. One of the graphs shows measles cases by US state through the years with a vertical line demonstrating when the vaccine was introduced. Another striking example comes from the New York Times showing data on scores from the NYC Regents Exams. These scores are collected for several reasons including to determine if a student graduates from high school. In New York City you need a 65 to pass. The distribution of the test scores forces us to notice something somewhat problematic: The most common test score is the minimum passing grade, with a few just below. This unexpected result is consistent with students close to passing having their scores bumped up. This is an example of how data visualization can lead to discoveries which would otherwise be missed if we simply subjected the data to a battery of data analysis tools or procedures. Data visualization is the strongest tool of what we call exploratory data analysis (EDA). John W. Tukey, considered the father of EDA, once said, “The greatest value of a picture is when it forces us to notice what we never expected to see.” Figure 15.2: John W. Tukey (source: Wikipedia). Many widely used data analysis tools were initiated by discoveries made via EDA. EDA is perhaps the most important part of data analysis, yet it is one that is often overlooked. Data visualization is also now pervasive in philanthropic and educational organizations. In the talks New Insights on Poverty and The Best Stats You’ve Ever Seen, Hans Rosling forced us to to notice the unexpected with a series of plots related to world health and economics. In his videos, he used animated graphs to show us how the world was changing and how old narratives were no longer true. Figure 15.3: Life expectancy versus fertility for two 1962 and 2013 It is also important to note that mistakes, biases, systematic errors and other unexpected problems often lead to data that should be handled with care. Failure to discover these problems often leads to flawed analyses and false discoveries. As an example, consider that measurement devices sometimes fail and that most data analysis procedures are not designed to detect these. Yet, these data analysis procedures will still give you an answer. The fact that it can be difficult or impossible to notice an error just from the reported results makes data visualization particularly important. Data visualization is a powerful approach to detecting these problems. We refer to this particular task as exploratory data analysis (EDA). In this chapter we will learn the basics of data visualization and exploratory data analysis. We will use three motivating examples. We will use the ggplot2 package to code. To learn the very basics, we will start with a somewhat artificial example: heights reported by students. Then we will cover the two examples mentioned above 1) world health and economics and 2) infectious disease trends in the United States. Of course, there is much more to data visualization than what we cover here. The following are references for those who wish to learn more: ER Tufte (1983) The visual display of quantitative information. Graphics Press. ER Tufte (1990) Envisioning information. Graphics Press. ER Tufte (1997) Visual explanations. Graphics Press. A Gelman, C Pasarica, R Dodhia (2002) Let’s practice what we preach: Turning tables into graphs. The American Statistician 56:121-130 NB Robbins (2004) Creating more effective graphs. Wiley We also do not cover interactive graphics, a topic that is too advanced for this book. Some useful resources for those interested in learning more can be found below: https://shiny.rstudio.com/ https://d3js.org/ "],
["data-types-1.html", "Chapter 16 Data types Exercise", " Chapter 16 Data types We will be working with two types of variables: categorical and numeric. Each can be divided into two other groups: categorical can be ordinal or not, whereas numerical variables can be discrete or continuous. When each entry in a vector comes from one of a small number of groups, we refer to the data as categorical data. Two simple examples are sex (male or female), regions (Northeast, South, North Central, West). Some categorical data can be ordered, for example spiciness (mild, medium, hot), even if they are not numbers per se. In statistics textbooks they sometimes refer to these as ordinal data. Example of numerical data are population sizes, murder rates, and heights. Some numerical data can be treated as ordered categorical. We can further divide numerical data into continuous and discrete. Continuous variables are those that can take any value such as heights, if measured with enough precision. For example, a pair of twins may be 68.12 and 68.11 inches respectively. Counts, such as population sizes, are discrete because they have to be round numbers. Note that discrete numeric data can be considered ordinal. Although this is technically true, we usually reserve the term ordinal data for variables belonging to a small number of different groups, with each group having many members. In contrast, when we have many groups with few cases in each group, we typically refer to them as discrete numerical variables. So, for example, the number of packs of cigarettes a person smokes a day, rounded to the closest pack, would be considered ordinal, while the actual number of cigarettes would be considered a numerical variable. But indeed, there are examples that can be considered both numerical and ordinal when it comes to visualizing data. Exercise Define variables containing the heights of males and females like this: library(dslabs) data(heights) male &lt;- heights$height[heights$sex==&quot;Male&quot;] female &lt;- heights$height[heights$sex==&quot;Female&quot;] How many measurements do we have for each? Suppose we can’t make a plot and want to compare the distributions side by side. We can’t just list all the numbers. Instead we will look at the percentiles. Create an five row table showing female_percentiles and male_percentiles with the 10th, 30th, 50th, …, 90th percentiles for each sex. Then create a data frame with these two as columns. Study the following boxplots showing us populations sizes by country: Which continent has the country with the biggest population size ? What continent has the largest median population size? What is median population size for Africa to the nearest million? What proportion of countries in Europe have populations below 14 million? A. 0.99 B. 0.75 C. 0.50 D. 0.25 If we use a log transformation, which continent shown above has the largest interquartile range ? "],
["distributions.html", "Chapter 17 Distributions 17.1 Case study: student heights 17.2 Distribution function 17.3 Cumulative distribution functions 17.4 Histograms 17.5 Smoothed density Exercises 17.6 The normal distribution 17.7 Percentiles 17.8 Case study coninued: summarizing male heights with two numbers Exercises 17.9 Boxplots 17.10 Case study continued: female student heights", " Chapter 17 Distributions You may have noticed that numerical data is often summarized with the average value. For example, the quality of a high school is sometimes summarized with one number: the average score on a standardized test. Occasionally, a second number is reported: the standard deviation. So, for example, you might read a report stating that scores were 680 plus or minus 50 (the standard deviation). The report has summarized an entire vector of scores with with just two numbers. Is this appropriate? Is there any important piece of information that we are missing by only looking at this summary rather than the entire list? Our first data visualization building block is learning to summarize lists of factors or numeric vectors. The most basic statistical summary of a list of objects or numbers is its distribution. Once a vector has been summarized as distribution, there are several data visualization techniques to effectively relay this information. 17.1 Case study: student heights Here we introduce a new motivating problem. It is an artificial one, but it will help us illustrate the concepts needed to understand distributions. Pretend that we have to describe the heights of our classmates to ET, an extraterrestrial that has never seen humans. As a first step we need to collect data. To do this we ask students to report their heights in inches. We ask them to provide sex information because we know there are two different distributions. We collect the data and save it in a data frame: library(dslabs) data(heights) head(heights) #&gt; sex height #&gt; 1 Male 75 #&gt; 2 Male 70 #&gt; 3 Male 68 #&gt; 4 Male 74 #&gt; 5 Male 61 #&gt; 6 Female 65 One way to convey the heights to ET is to simply send him this list of 1050 heights. But there are much more effective ways to convey this information and understanding the concept of a distribution will help. To simplify the explanation, at first we focus on male heights. 17.2 Distribution function It turns that, in some cases, the average and the standard deviation are pretty much all we need to understand the data. We will learn data visualization techniques that will help us determine when this two number summary is appropriate. These same techniques will serve as an alternative for when two numbers is not enough. The most basic statistical summary of a list of objects or numbers is its distribution. The simplest way to think of a distribution is as a compact description of a list with many entries. This concept should not be new for most of you. For example, with categorical data, the distribution simply describes the proportion of each unique category. The sex represented in the heights dataset is: #&gt; #&gt; Female Male #&gt; 0.227 0.773 This two category frequency table is the simplest form of a distribution. We don’t really need to visualize it since one number describes everything we need to know 23% are females and the rest are males. When there are more categories, then a simple barplot describes the distribution. Here is an example with the US state regions: Figure 17.1: Distribution of regions acorss the 50 states and D.C. This particular plot is simply showing us four numbers: one for each category. We usually use barplots to display a few numbers. Although, this particular plot, a graphical representation of a frequency table, does not provide much more insight than a table itself, it is a first example of how we convert a vector into a plot that succinctly summarizes all the information in the vector. Once the data is numerical, the task of displaying distributions is more challenging. 17.3 Cumulative distribution functions Numerical data, that are not categorical, also have distributions. In general, when data is not categorical, reporting the frequency of each entry is not an effective summary since most entries are unique. For example, while several students reported a height of 68 inches, only one student reported a height of 68.503937007874 inches and only one student reported a height 68.8976377952756 inches. We assume that they converted from 174 and 175 centimeters respectively. Statistics textbooks teach us that a more useful way to define a distribution for numeric data is to define a function that reports the proportion of the data below \\(a\\) for all possible values of \\(a\\). This function is called the cumulative distribution function (CDF). In Statistics the following notation is used: \\[ F(a) = \\mbox{Pr}(x \\leq a) \\] Here is a plot of \\(F\\) for the height data: Figure 17.2: Empirical cummulative distribution function for male height. Like the frequency table does for categorical data, the CDF defines the distribution for numerical data. From the plot we can see, for example, that 34% of the values are below 65, since \\(F(66)=\\) 0.164, or that 90% of the values are below 72, since \\(F(72)=\\) 0.841, etc.. In fact, we can report the proportion of values between any two heights, say \\(a\\) and \\(b\\), by computing \\(F(b) - F(a)\\). This means that if we send this plot above to ET, he will have all the information needed to reconstruct the entire list. Paraphrasing the expression “a picture is worth a thousands word”, in this case a picture is as informative as 812 numbers. A final note: because CDFs can be defined mathematically, as opposed to using data as we do here, the word empirical is added to distinguish and we use the term empirical CDF (ECDF) instead. 17.4 Histograms Although the CDF concept is widely discussed in statistics textbooks, the plot is actually not very popular in practice. The main reason is that it does not easily convey characteristics of interest such as: at what value is the distribution centered? Is the distribution symmetric? What ranges contain 95% of the values? Histograms are much preferred because they greatly facilitate answering such questions. Histograms sacrifice just a bit of information to produce plots that are much easier to interpret. The simplest way to make a histograms is to divide the span of our data into non-overlapping bins of the same size. Then, for each bin, we count the number of values that fall in that interval. The histogram plots these counts as bars with the base of the bar defined by the intervals. Here is the histogram for the height data splitting the range of values into one inch intervals: \\([49.5, 50.5], [51.5,52.5],(53.5,54.5],...,(82.5,83.5]\\) Figure 17.3: Histogrom of male heights. Note that a histogram is similar to a barplot, but it differs in that the x-axis is numerical, not categorical. If we send this plot to ET, he will immediately learn some important properties about our data. First, the range of the data is from 50 to 84 with the majority (more than 95%) between 63 and 75 inches. Second, the heights are close to symmetric around 69 inches. Also, by adding up counts, ET could obtain a very good approximation of the proportion of the data in any interval. Therefore, the histogram above is not only easy to interpret, but also provides almost all the information contained in the raw list of 812 heights with about 30 bin counts. So what information do we lose? Note that all values in each interval are treated the same when computing bin heights. So, for example, the histogram does not distinguish between 64, 64.1, and 64.2 inches. Given that these differences are almost unnoticeable to the eye, the practical implications are negligible and we were able to summarize the data to just 23 numbers. 17.5 Smoothed density Smooth density plots are aesthetically more appealing than histograms. Here is what a smooth density plot looks like for our heights data: Figure 17.4: Smooth density of male heights. In this plot, we no longer have sharp edges at the interval boundaries and many of the local peaks have been removed. Also, the scale of the y-axis changed from counts to density. To understand the smooth densities we have to understand estimates, a topic we don’t cover until a later chapter. However, we provide a heuristic explanation to help you understand the basics so you can use this useful data visualization tool. The main new concept you must understand is that we assume that our list of observed values comes from a much much larger list of unobserved values. In the case of heights, you can imagine our list of 1050 students comes from a hypothetical list containing all the heights of all the students in all the world measured very precisely. Let’s say there are 1,000,000 of these. This list values, like any list of values, has a distribution and this is really what we want to report to ET since it is much more general. Unfortunately we don’t get to see it. However, we make an assumption that helps us perhaps approximate it. Because we have 1,000,000 values, measured very precisely, we can make a histogram with very very small bins. The assumption is that if we do this, consecutive bins will be similar. This is what we mean by smooth: we don’t have big jumps. So here a hypothetical histogram with bins of size 1: The smaller we make the bins, the smoother the histogram gets. Here are the histograms with bin width of 1, 0.5 and 0.1: The smooth density is basically the curve that goes through the top of the histogram bars when the bins are very, very small. To make the curve not depend on the hypothetical size of the hypothetical list, we compute the curve on frequencies rather than counts Now, back to reality. We don’t have millions of measurements, instead we have 812 and we can’t make a histogram with very small bins. So instead we make a histogram, , using bin sizes appropriate for our data and computing frequencies rather than counts, and we draw a smooth curve that goes through the tops of the histogram bars: Note that smooth is a relative term. We can actually control the smoothness of the curve that defines the smooth density through an option in the function that computes the smooth density. Here are two examples using different degrees of smoothness on the same histogram: p1 &lt;- heights %&gt;% filter(sex==&quot;Male&quot;)%&gt;% ggplot(aes(height)) + geom_histogram(aes(y=..density..), binwidth = 1) + geom_density(col=&quot;#00BFC4&quot;, adjust = 0.5) p2 &lt;- heights %&gt;% filter(sex==&quot;Male&quot;) %&gt;% ggplot(aes(height)) + geom_histogram(aes(y=..density..), binwidth = 1) + geom_density(col=&quot;#00BFC4&quot;, adjust = 2) grid.arrange(p1,p2, ncol=2) We need to make this choice with care as the resulting visualizations can change our interpretation of the data. We should select a degree of smoothness that we can defend as being representative of the underlying data. In the case of height, we really do have reason to believe that the proportion of people with similar heights should be the same. For example, the proportion that is 72 inches should be more similar to the proportion that is 71, than to the proportion that is 78 or 65. This implies that the curve should be pretty smooth; that is, more like the example on the right than on the left. While the histogram is an assumption free summary, the smoothed density is based on some assumptions. Interpreting the y-axis Finally, we point out that interpreting the y-axis of a smooth density plot is not straightforward. It is scaled so that the area under the density curve adds up to 1. So if you imagine we form a bin with a base 1 unit in length, the y-axis value tells us the proportion of values in that bin. But this is only true for bins of size 1. For other sized intervals, the best way to determine the proportion of data in that interval is by computing the proportion of the total area contained in that interval. For example, here are the proportion of values between 65 and 68: The proportion of this area is about 0.32 meaning that about that proportion is between 65 and 68 inches. By understanding this we are ready to use the smooth density as a summary. For this dataset we would feel quite comfortable with the smoothness assumption and therefore with sharing this aesthetically pleasing figure with ET, which he could use to understand our male heights data: Densities permit stratification As a final note, we point out that an advantage of smooth densities over histograms for visualization purposes is that densities makes it easier to compare two distributions. This is in large part because the jagged edges of the histogram add clutter. Here is an example comparing male and female heights: heights %&gt;% ggplot(aes(height, fill=sex)) + geom_density(alpha = 0.2) With the right argument, ggplot automatically shades the intersecting region with a different color. Exercises In the murders dataset, the region is a categorical variable and the following is its distribution: To the closet 5%, what proportion of the states are in the North Central region? Which of the following is true: A. The graph above is a histogram. B. The graph above shows only four numbers with a bar plot. C. Categories are not numbers so it does not make sense to graph the distribution. D. The colors, not the height of the bars, describe the distribution. The plot below shows the eCDF for male heights: Based on the plot, what percentage of males are shorter than 75 inches? A. 100% B. 95% C. 80% D. 72 inches To the closest inch, what height m has the property that 1/2 of the male students are taller than m and 1/2 are shorter? A. 61 inches B. 64 inches C. 69 inches D. 74 inches Here is an eCDF of the murder rates across states: Knowing that there are 51 states (counting DC) and based on this plot, how many states have murder rates larger than 10 per 100,000 people? A. 1 B. 5 C. 10 D. 50 Based on the eCDF above, which of the following statements are true: A. About half the states have murder rates above 7 per 100,000 and the other half below. B. Most states have murder rates below 2 per 100,000. C. All the states have murder rates above 2 per 100,000. D. With the exception of 4 states, the murder rates are below 5 per 100,000. Below is a histogram of male heights in our heights dataset: Based on this plot, how many males are between 63.5 and 65.5? A. 10 B. 24 C. 34 D. 100 About what percentage are shorter than 60 inches? A. 1% B. 10% C. 25% D. 50% Based on the density plot below, about what proportion of US states have populations larger than 10 million? A. 0.02 B. 0.15 C. 0.50 D. 0.55 Below are three density plots. Is it possible that they are from the same dataset? Which of the following statements is true: A. It is impossible that they are from the same dataset. B. They are from the same dataset, but different due to code errors. C. They are the same dataset, but the first and second undersmooth and the third oversmooths. D. They are the same dataset, but the first is not in the log scale, the second undersmooths and the third oversmooths. 17.6 The normal distribution Histograms and density plots provide excellent summaries of a distribution. But can we summarize even further? We often see the average and standard deviation used as summary statistics: a two number summary! To understand what these summaries are and why they are so widely used, we need to understand the normal distribution. The normal distribution, also known as the bell curve and as the Gaussian distribution, is one of the most famous mathematical concepts in history. A reason for this is that approximately normal distributions occur in many situations. Examples include gambling winnings, heights, weights, blood pressure, standardized test scores, and experimental measurement errors. There are explanations for this, but we describe these in a later chapter. Here we focus on how the normal distribution helps us summarize data. Rather than using data, the normal distribution is defined with a mathematical formula. For any interval \\((a,b)\\) the proportion of values in that interval can be computed using this formula: \\[\\mbox{Pr}(a &lt; x &lt; b) = \\int_a^b \\frac{1}{\\sqrt{2\\pi}s} \\exp\\left\\{-\\frac{1}{2}\\left( \\frac{x-m}{s} \\right)^2\\right\\} \\, dx\\] You don’t need to memorize or understand the details of the formula. But note that it is completely defined by just two parameters: \\(m\\) and \\(s\\). The rest of the symbols in the formula represent the interval ends that we determine, \\(a\\) and \\(b\\), and known mathematical constants \\(\\pi\\) and \\(\\mathrm{e}\\). These two parameters, \\(m\\) and \\(s\\), are referred to as the average, also called the mean, and the standard deviation (SD) of the distribution respectively. The distribution is symmetric, centered at the average, and most values (about 95%) are within 2 SDs from the average. Here is what it looks like when the average is 0 and the SD is 1: The fact that the distribution is defined by just two parameters implies that if a dataset is approximated by a normal distribution, all the information needed to describe the distribution can be encoded in just two numbers: the average and the standard deviation, which we now define for an arbitrary list of numbers. For a list of numbers contained in a vector x the average is defined as average &lt;- sum(x) / length(x) and the SD is defined as SD &lt;- sqrt( sum( (x-mu)^2) / length(x)) which can be interpreted as the average distance between values and their average. Let’s compute the values for the height for males which we will store in the object \\(x\\): index &lt;- heights$sex==&quot;Male&quot; x &lt;- heights$height[index] The pre-built functions mean and sd [Footnote: SD divide by n-1] can be used here: average &lt;- mean(x) SD &lt;- sd(x) c(average=average,SD=SD) #&gt; average SD #&gt; 69.31 3.61 Here is a plot of the smooth density and the normal distribution with mean average = 69.315 and SD = 3.611 Notice that it does appear to be quite a good approximation. We now will see how well this approximation works at predicting proportion of values within intervals. 17.6.1 Standardized units For data that is approximately normally distributed, it is convenient to think in terms of standard units. The standard unit of a value tells us how many standard deviations away from the average it is. Specifically, for a value \\(x\\) we define it as \\(z = (x-\\mbox{average})/\\mbox{SD}\\). If you look back at the formula for the normal distribution you notice that what is being exponentiated is \\(- z^/2\\). The maximum of \\(\\exp{-z^2/2}\\) is when \\(z=0\\) which explains why the maximum of the distribution is at the mean. It also explains the symmetry since \\(- z^/2\\) is symmetric around 0. If we convert the normally distributed data to standard units, we can quickly know if, for example, a person is about average (\\(z=0\\)), one of the largest (\\(z=2\\)), one of the smallest (\\(z=-2\\)) or an extremely rare occurrence (\\(z&gt;3\\) or \\(z &lt; -3\\)). Remember that it does not matter what the original units are, these rules apply to data that is approximately normal. In R we can obtain standard units using the function scale: z &lt;- scale(x) Now to see how many men are within 2 SDs from the average we simply type: mean(abs(z) &lt; 2) #&gt; [1] 0.95 The proportion is about 95% which is what the normal distribution predicts! To further confirm that in fact the approximation is a good one, we can use quantile-quantile plots. 17.6.2 Quantile-quantile QQ plots A systematic way to assess how well the normal distribution fits the data is to check if the observed and predicted proportions match. In general, the approach of the QQ-plot is as follows: Define a series of proportions \\(p=0.05,\\dots .95\\) For each \\(p\\) determine the value \\(q\\) so that the proportion of values in the data below \\(q\\) is \\(p\\). The \\(q\\)s are referred to as the quantiles. To give a quick a example, for the male heights data we have that: mean(x &lt;= 69.5) #&gt; [1] 0.515 50% are shorter or equal to 69 inches. This implies that if \\(p=0.50\\) then \\(q=69.5\\). Now we define a series of \\(p\\) p &lt;- seq(0.05, 0.95, 0.05) If the quantiles for the data match the quantiles for the normal then it must be because the data follows a normal distribution. To obtain the quantiles from the data we can use the quantile function like this: observed_quantiles &lt;- quantile(x, p) To obtain the theoretical normal distribution quantiles, with the corresponding average and SD, we use the qnorm function: theoretical_quantiles &lt;- qnorm( p, mean = mean(x), sd = sd(x)) To see if they match or not, we plot them against each other and draw the identity line: plot(theoretical_quantiles, observed_quantiles) abline(0,1) Notice that this code becomes much cleaner if we use standard units: observed_quantiles &lt;- quantile(z, p) theoretical_quantiles &lt;- qnorm(p) plot(theoretical_quantiles, observed_quantiles) abline(0,1) 17.7 Percentiles Before we move on, let’s define some terms that are commonly used in exploratory data analysis. Percentiles are special cases of quantiles that are commonly used. The percentiles are the quantiles you obtain when setting the \\(p\\) at \\(0.01, 0.02, ..., 0.99\\). We call, for example, the case of \\(p=0.25\\) the 25th percentile, which gives us a number for which 25% of the data is below. The most famous percentile is the 50th also known as the median. For the normal distribution the median and average are the same, but this is generally not the case. Another special case that receives a name are the quartiles which are obtained when setting \\(p=0.25,0.50\\), and \\(0.75\\). 17.8 Case study coninued: summarizing male heights with two numbers Using the histogram, density plots and qq-plots, we have become convinced that the male height data is well approximated with a normal distribution. In this case, we report back to ET a very succinct summary: male heights follow a normal distribution with an average of 69.315 inches and a SD of 3.611 inches. With this information ET will have everything he needs to know what to expect when he meets our male students. Exercises Load the height data set and create a vector x with just the male heights: library(dslabs) data(heights) x &lt;- heights$height[heights$sex==&quot;Male&quot;] What proportion of the data is between 69 and 72 inches (taller than 69 but shorter or equal to 72)? Hint: a logical operator and mean. Suppose all you know about the data is the average and the standard deviation. Use the normal approximation to estimate the proportion you just calculated. Hint: Start by computing the average and standard deviation. Then use the pnorm function to predict the proportions. Note the approximation calculated in question two is very close to the exact calculation in the first question. Now perform the same task for more extreme values. Compare the exact calculation and the normal approximation for the interval (79,81]. How many times bigger is the actual proportion than the approximation? Approximate the distribution of adult men in the world as normally distributed with an average of 69 inches and a standard deviation of 3 inches. Using this approximation, estimate the proportion of adult men that are 7 foot tall or taller, referred to as seven footers. Hint: use the pnorm function. There are about 1 billion men between the ages of 18 and 40 in the world. Use your answer to the previous question to estimate how many these men (18-40 yearl olds) are seven feet tall or taller in the world? There are about 10 National Basketball Association (NBA) players that are 7 feet tall or higher. Using the answer to the previous two questions, what proportion of the world’s 18 to 40 year old seven footers are in the NBA? Repeat the calculations performed in the previous question for Lebron James’ height: 6 feet 8 inches. There are about 150 players that are that tall. In answering the previos questions, we found that it is not at all rare for a seven footer to become an NBA player. What would be a fair critique of our calculations: A. Practice and talent are what make a great basketball player, not height. B. The normal approximation is not appropriate for heights. C. As seen in question 3, the normal approximation tends to underestimate the extreme values. It’s possible that there are more seven footers than we predicted. D. As seen in question 3, the normal approximation tends to overestimate the extreme values. It’s possible that there are less seven footers than we predicted. 17.9 Boxplots To introduce boxplots we will go back to the US murder data. Suppose we want to summarize the murder rate distribution. Using the data visualization technique we have learned, we can quickly see that the normal approximation does not apply here: Figure 17.5: Histogram and qqplot of US states murder rates. In this case, the histogram, or a smooth density plot, would serve as a relatively succinct summary. Now, suppose those used to receiving just two numbers as summaries ask us for a more compact summary. Here Tukey offered some advice. Provide a five number summary composed of the range along with the quartiles (the 25th, 50th, and 75th percentiles). Tukey further suggested that we ignore outliers when computing the range and instead plot these as independent points. We provide a detailed explanation of outliers later in the chapter. Finally, he suggested we plot these numbers as a “box” with “whiskers”&quot; like this: with the box defined by the 25% and 75% percentile and the whiskers showing the range. The distance between these two are called the interquartile range. The two points are outliers according to Tukey’s definition. The median is shown with a horizontal line. Today, we call these boxplots. From just this simple plot we know that the median is about 2.5, that the distribution is not symmetric, and that the range is 0 to 5 for the great majority of states with two exceptions. Boxplots are even more useful when we want to quickly compare two or more distributions. For example, here are the heights for men and women: heights %&gt;% ggplot(aes(x=sex, y=height, fill=sex)) + geom_boxplot() The plot immediately reveals that males are, on average, taller than females. The standard deviations appear to be similar. 17.10 Case study continued: female student heights We have to give ET a full summary of our heights, but we have not yet summarized female heights. We expect that they will follow a normal distribution, just like males. However, exploratory plots reveal that the approximation is not as useful: We see something we did not see for the males: the density plot has a second “bump”.Also, the qqplot shows that the highest points, tend to be taller than expected by the normal distribution. Finally, we also see five points in the qqplot that suggest shorter than expected heights for a normal distribution. When reporting back to ET we might need to provide a histogram rather than just the average and standard deviation for the female heights. However, go back and read Tukey’s quote. We have noticed what we didn’t expect to see. If we look at other female height distributions, we do find that they are well approximated with a normal distribution. So why are our female students different? Is our class a requirement for the female basketball team? Are small proportions of females claiming to be taller than they are? Another, perhaps more likely, explanation is that in the form students used to enter their heights, FEMALE was the default sex and some males entered their heights, but forgot to change the sex variable. In any case, data visualization has helped discover a potential flaw in our data. Regarding the five smallest values, note that these values are: heights %&gt;% filter(sex==&quot;Female&quot;) %&gt;% top_n(5, desc(height)) %&gt;% .$height #&gt; [1] 51 53 55 52 52 Because these are reported heihgts, a possibility is that the student meant to enter 5’1“, 5’2”, 5’3&quot; or 5’5“. "],
["robust-summaries.html", "Chapter 18 Robust summaries 18.1 Outliers 18.2 Median 18.3 The inter quartile range (IQR) 18.4 Tukey’s definition of an outlier 18.5 Median absolute deviation Exercises 18.6 Case Study: self-reported heights", " Chapter 18 Robust summaries 18.1 Outliers We previously described how boxplots show outliers, but we did not provide a precise definition. Here we discuss outliers, approaches that can help detect them, and summaries that take into account their presence. Outliers are very common in data science. Data recording can be complex and it is common to observe data points generated in error. For example, an old monitoring device may read out nonsensical measurements before completely failing. Human error is also a source of outliers, in particular when data entry is done manually. For instance, an individual may mistakenly enter their height in centimeters instead of inches. Now, how do we distinguish an outlier from measurements that were too big or too small simply due to expected variability? This is not always an easy question to answer, but we try to provide some guidance. Let’s begin with a simple case. Suppose a colleague is charged with collecting demography data for a group of males. The data is stored in the object: #&gt; num [1:500] 5.59 5.8 5.54 6.15 5.83 5.54 5.87 5.93 5.89 5.67 ... Our colleague uses the fact that heights are usually well approximated by a normal distribution and summarizes the data with average and standard deviation: mean(outlier_example) #&gt; [1] 6.1 sd(outlier_example) #&gt; [1] 7.8 and writes a report on the interesting fact that this group of males is much taller than usual. The average height is over six feet tall! Using your data science skills, however, you notice something else that is unexpected: the standard deviation is over 7 inches. Adding and subtracting two standard deviations, you note that 95% of this population will have heights between -9.489, 21.697 inches which does not make sense. A quick plot reveals the problem: hist(outlier_example) There appears to be at least one value that is nonsensical, since we know that a height of 180 feet is impossible. The boxplot detects this point as an outlier: boxplot(outlier_example) 18.2 Median When we have an outlier like this, the average can become very large. Keep in mind that mathematically we can make the average as large as we want by simply changing one number: with 500 data points, we can increase the average by any amount \\(\\Delta\\) by adding \\(\\Delta \\times\\) 500 to a single number. The median, defined as the value for which half the values are smaller and the other half are bigger, is robust to such outliers. No matter how large we make the largest point, the median remains the same. With this data the median is: median(outlier_example) #&gt; [1] 5.74 which is about 5 feet and 9 inches. The median is what boxplots display as a horizontal line. 18.3 The inter quartile range (IQR) The box in boxplots are defined by the first and third quartile. These are meant to provide an idea of the variability in the data: 50% of the data is within this range. The difference between the 3rd and 1st quartile (or 75th and 25th percentiles) is referred to as the inter quartile range (IQR). As is the case with the median, this quantity will be robust to outliers as large values do not affect it. We can do some math to see that for normal data the IQR / 1.349 approximates the standard deviation of the data had an outlier not been present. We can see that this works well in our example since we get a standard deviation estimate of: IQR(outlier_example) / 1.349 #&gt; [1] 0.245 which is about 3 inches. 18.4 Tukey’s definition of an outlier In R, points falling outside the whiskers of the boxplot are referred to as outliers. This definition of outlier was introduced by Tukey. The top whisker ends at the 75th percentile plus 1.5 \\(\\times\\) IQR. Similarly the bottom whisker ends at the 25th percentile minus 1.5\\(\\times\\) IQR. If we define the first and third quartiles as \\(Q_1\\) and \\(Q_3\\) respectively, then an outlier is anything outside the range: \\[[Q_1 - 1.5 \\times (Q_3 - Q1), Q_3 + 1.5 \\times (Q_3 - Q1)]\\]. When the data is normally distributed. the standard units of these values are: q3 &lt;- qnorm(0.75) q1 &lt;- qnorm(0.25) iqr &lt;- q3 - q1 r &lt;- c(q1 - 1.5*iqr, q3 + 1.5*iqr) r #&gt; [1] -2.7 2.7 Using the pnorm function we see that 99.3% of the data falls in this interval. Keep in mind that this is not such an extreme event: if we have 1000 data points that are randomly distributed, we expect to see about 7 outside of this range. But these would not be outliers since we expect to see them under the typical variation. If we want an outlier to be rarer, we can increase the 1.5 to a larger number. Tukey also used 3 and called these far out outliers. With a normal distribution 100% of the data falls in this interval. This translates into about 1 in a million chance of being outside the range. In the geom_boxplot function this can be controlled by the outlier.size argument, which defaults to 1.5. The 180 feet measurement is well beyond the range of the height data: max_height &lt;- quantile(outlier_example, 0.75) + 3*IQR(outlier_example) If we take this value out, we can see that the data is in fact normally distributed as expected: x &lt;- outlier_example[outlier_example &lt; max_height] qqnorm(x) qqline(x) 18.5 Median absolute deviation Another way to estimate the standard deviation in the presence of outliers is to use the median absolute deviation (MAD). To compute the MAD, we first compute the median, and then for each value we compute the distance between that value and the median. The MAD is defined as the median of these distances. For technical reasons not discussed here, this quantity needs to be multiplied by 1.4826 to assure it approximates the actual standard deviation. The mad function already incorporates this correction. For the height data we get a MAD of: mad(outlier_example) #&gt; [1] 0.237 which is about 3 inches. Exercises Load the height data set and create a vector x with just the male heights used in Galton’s data on the heights of parents and their children from his historic research on heredity. ##You can install data like this: install.packages(&quot;HistData&quot;) library(HistData) data(Galton) x &lt;- Galton$child Compute the average and median of these data. Compute the median and median absolute deviation of these data. Now suppose Galton made a mistake when entering the first value, forgetting to use the decimal point. You can imitate this error by typing: x_with_error &lt;- x x_with_error[1] &lt;- x_with_error[1]*10 How many inches does the average grow after this mistake? How many inches does the SD grow after this mistake? How many inches does the median grow after this mistake? How many inches does the MAD grow after this mistake? How could you use exploratory data analysis to detect that an error was made? A. Since it is only one value out of many, we will not be able to detect this. B. We would see an obvious shift in the distribution. C. A boxplot, histogram, or qq-plot would reveal a clear outlier. D. A scatter plot would show high levels of measurement error. How much can the average accidentally grow with mistakes like this? Write a function called error_avg that takes a value k and returns the average of the vector x after the first entry changed to k. Show the results for k=10000 and k=-10000. 18.6 Case Study: self-reported heights data(reported_heights) str(reported_heights) #&gt; &#39;data.frame&#39;: 1095 obs. of 3 variables: #&gt; $ time_stamp: chr &quot;2014-09-02 13:40:36&quot; &quot;2014-09-02 13:46:59&quot; &quot;2014-09-02 13:59:20&quot; &quot;2014-09-02 14:51:53&quot; ... #&gt; $ sex : chr &quot;Male&quot; &quot;Male&quot; &quot;Male&quot; &quot;Male&quot; ... #&gt; $ height : chr &quot;75&quot; &quot;70&quot; &quot;68&quot; &quot;74&quot; ... Height is a character vector so we create a new column with the numeric version: reported_heights &lt;- reported_heights %&gt;% mutate(original_heights = height, height = as.numeric(height)) We get a warning about NAs. This is because some of the self reported heights were not numbers. We can see why we get these: reported_heights %&gt;% filter(is.na(height)) %&gt;% head() #&gt; time_stamp sex height original_heights #&gt; 1 2014-09-02 15:16:28 Male NA 5&#39; 4&quot; #&gt; 2 2014-09-02 15:16:37 Female NA 165cm #&gt; 3 2014-09-02 15:16:52 Male NA 5&#39;7 #&gt; 4 2014-09-02 15:16:56 Male NA &gt;9000 #&gt; 5 2014-09-02 15:16:56 Male NA 5&#39;7&quot; #&gt; 6 2014-09-02 15:17:09 Female NA 5&#39;3&quot; Some students self reported their heights using feet and inches rather than just inches. Others used centimeters and others were just trolling. For now we will remove these entries: reported_heights &lt;- filter(reported_heights, !is.na(height)) If we compute the average and standard deviation, we notice that we obtain strange results. The average and standard deviation are different from the median and MAS: reported_heights %&gt;% group_by(sex) %&gt;% summarize(average = mean(height), sd = sd(height), median = median(height), MAD = mad(height)) #&gt; # A tibble: 2 x 5 #&gt; sex average sd median MAD #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Female 63.4 27.9 64.2 4.05 #&gt; 2 Male 103.4 529.9 70.0 4.45 This suggests that we have outliers, which is confirmed by simply creating a boxplot: reported_heights %&gt;% ggplot(aes(sex, height)) + geom_boxplot() We can see some rather extreme values. To see what these values are, we can quickly look at the largest values using the arrange function: reported_heights %&gt;% arrange(desc(height)) %&gt;% top_n(10, height) #&gt; time_stamp sex height original_heights #&gt; 1 2014-09-03 23:55:37 Male 11111 11111 #&gt; 2 2016-04-10 22:45:49 Male 10000 10000 #&gt; 3 2015-08-10 03:10:01 Male 684 684 #&gt; 4 2015-02-27 18:05:06 Male 612 612 #&gt; 5 2014-09-02 15:16:41 Male 511 511 #&gt; 6 2014-09-07 20:53:43 Male 300 300 #&gt; 7 2014-11-28 12:18:40 Male 214 214 #&gt; 8 2017-04-03 16:16:57 Male 210 210 #&gt; 9 2015-11-24 10:39:45 Male 192 192 #&gt; 10 2014-12-26 10:00:12 Male 190 190 #&gt; 11 2016-11-06 10:21:02 Female 190 190 The first seven entries look like strange errors. However, the next few look like they were entered as centimeters instead of inches. Since 184 cm is equivalent to six feet tall, we suspect that 184 was actually meant to be 72 inches. We can review all the nonsensical answers by looking at the data considered to be far out by Tukey: max_height &lt;- quantile(reported_heights$height, .75) + 3*IQR(reported_heights$height) min_height &lt;- quantile(reported_heights$height, .25) - 3*IQR(reported_heights$height) c(min_height, max_height ) #&gt; 25% 75% #&gt; 44 93 outliers &lt;- reported_heights %&gt;% filter(!between(height, min_height, max_height)) %&gt;% arrange(height) outliers$height #&gt; [1] 0.00 0.70 1.00 1.00 1.00 1.60 1.70 #&gt; [8] 2.00 5.00 5.00 5.00 5.00 5.10 5.10 #&gt; [15] 5.10 5.10 5.11 5.11 5.11 5.11 5.20 #&gt; [22] 5.20 5.20 5.25 5.25 5.30 5.40 5.40 #&gt; [29] 5.50 5.50 5.50 5.50 5.50 5.50 5.50 #&gt; [36] 5.50 5.50 5.50 5.50 5.51 5.57 5.60 #&gt; [43] 5.60 5.60 5.60 5.60 5.60 5.60 5.69 #&gt; [50] 5.70 5.70 5.70 5.70 5.70 5.70 5.70 #&gt; [57] 5.75 5.80 5.80 5.80 5.80 5.80 5.90 #&gt; [64] 5.90 5.90 5.90 6.00 6.00 6.00 6.00 #&gt; [71] 6.00 6.00 6.00 6.00 6.00 6.00 6.00 #&gt; [78] 6.00 6.00 6.00 6.00 6.00 6.00 6.00 #&gt; [85] 6.00 6.10 6.10 6.20 6.20 6.30 6.50 #&gt; [92] 6.50 6.50 6.70 7.00 12.00 19.00 22.00 #&gt; [99] 23.00 25.00 34.00 34.00 100.00 103.20 111.00 #&gt; [106] 120.00 120.00 150.00 150.00 152.00 157.00 157.00 #&gt; [113] 158.00 158.00 158.00 159.00 160.00 160.00 161.00 #&gt; [120] 162.00 162.00 162.00 163.00 164.00 164.00 165.00 #&gt; [127] 165.00 165.00 167.00 167.00 167.00 168.00 168.00 #&gt; [134] 168.00 168.00 169.00 169.00 169.00 169.00 170.00 #&gt; [141] 170.00 170.00 170.00 170.00 170.00 170.00 170.00 #&gt; [148] 170.00 172.00 172.00 172.00 172.00 172.00 172.00 #&gt; [155] 172.00 173.00 173.00 173.00 174.00 174.00 174.00 #&gt; [162] 174.00 175.00 175.00 175.00 175.00 175.00 176.00 #&gt; [169] 176.00 177.00 178.00 178.00 178.00 178.00 178.00 #&gt; [176] 179.00 180.00 180.00 180.00 180.00 180.00 180.00 #&gt; [183] 180.00 180.00 180.00 182.00 183.00 183.00 183.00 #&gt; [190] 184.00 184.00 184.00 185.00 185.00 186.00 190.00 #&gt; [197] 190.00 192.00 210.00 214.00 300.00 511.00 612.00 #&gt; [204] 684.00 10000.00 11111.00 Examining these heights we see two common mistakes: entries in centimeters, which turn out to be too large, and entries of the form x.y with x and y representing feet and inches respectively. Some of the even smaller values, such as 1.6, could be entries in meters. In the Data Wrangling Chapter, we will learn techniques for correcting these values and converting them into inches. Here we were able to detect this problem using careful data exploration to uncover issues with the data: the first step in the great majority of data science projects. "],
["summarizing-data-with-dplyr.html", "Chapter 19 Summarizing data with dplyr 19.1 Summarize 19.2 The dot operator 19.3 Group then summarize 19.4 Sorting data tables Exercises", " Chapter 19 Summarizing data with dplyr An important part of exploratory data analysis is summarizing data. We learned about the average and standard deviation as a two summary statistic that provides all the necessary information to summarize data that is normally distributed. We also learned that better summaries can be achieved by splitting data into groups before using the normal approximation. For example, in our heights dataset we described the height of men and women separately. In this section we cover two new dplyr verbs that make these computations easier: summarize and group_by. We learn to access resulting values using what we call the dot placeholder. Finally, we also learn to use arrange which helps us examine data after sorting. 19.1 Summarize The summarize function in dplyr provides a way to compute summary statistics with intuitive and readable code. We start with a simple example based on heights: library(dslabs) data(heights) that computes the average and standard deviation for males: s &lt;- heights %&gt;% filter(sex == &quot;Male&quot;) %&gt;% summarize(average = mean(height), standard_deviation = sd(height)) s #&gt; average standard_deviation #&gt; 1 69.3 3.61 This takes our original data table as input, filters it to keep only males and then produces a new, summarized table with just the average and the standard deviation of heights. We get to choose the names of the columns of the resulting table. For example, above we decided to use average and standard_deviation, but we could have used other names just the same. Because the resulting table, stored in s, is a data frame, we can access the components with the accessor $, which in this case will be a numeric: s$average #&gt; [1] 69.3 s$standard_deviation #&gt; [1] 3.61 As with most other dplyr functions, summarize is aware of the variable names and we can use them directly. So when inside the call to the summarize function we write mean(height), it is accessing the column with the name, and then computing the average of the respective numeric vector. We can compute any other summary that operates on vectors and returns a single value. For example, we can add the median, min and max like this: heights %&gt;% filter(sex == &quot;Male&quot;) %&gt;% summarize(median = median(height), minimum = min(height), maximum = max(height)) #&gt; median minimum maximum #&gt; 1 69 50 82.7 We can obtain these three values with just one line using the quantiles function. For example, quantile(x, c(0,0.5,1)) returns the min, median, and max of the vector x. However, if we attempt to use a function that returns two or more values: heights %&gt;% filter(sex == &quot;Male&quot;) %&gt;% summarize(range = quantile(height, c(0, 0.5, 1))) we will receive an error: Error: expecting result of length one, got : 2. With the function summarize we can only call functions that return a single value. In a later chapter, we will learn how to deal with functions that return more than one value. For another example of how we can use the summarize function, let’s compute the average murder rate for the United States. Remember our data table includes total murders and population size for each state and we have already used dplyr to add a murder rate column: data(murders) murders &lt;- murders %&gt;% mutate(murder_rate = total/population*100000) Remember that the US murder is not the average of the state murder rates: summarize(murders, mean(murder_rate)) #&gt; mean(murder_rate) #&gt; 1 2.78 This is because in the computation above the small states are given the same weight as the large ones. The US murder rate is the totalUS murders divided by the total US population. So the correct computation is: us_murder_rate &lt;- murders %&gt;% summarize(rate = sum(total) / sum(population) * 100000) us_murder_rate #&gt; rate #&gt; 1 3.03 This computation counts larger states proportionally to their size which results in a larger value. 19.2 The dot operator The us_murder_rate object defined above represents just one number. Yet we are storing it in a data frame: class(us_murder_rate) #&gt; [1] &quot;data.frame&quot; since, as most dplyr functions, summarize always returns a data frame. This might be problematic if we want to use the result with functions that require a numeric value. Here we show a useful trick for accessing values stored in data piped via %&gt;%: when a data object is piped it can be accessed using the dot .. To understand what we mean take a look at this line of code: us_murder_rate %&gt;% .$rate #&gt; [1] 3.03 This returns the value in the rate column of us_murder_rate making it equivalent to us_murder_rate$rate. To understand this line, you just need to think of . as a placeholder for the data that is being passed through the pipe. Because this data object is a data frame, we can access its columns with the $. To get a number from the original data table with one line of code we can type: us_murder_rate &lt;- murders %&gt;% summarize(rate = sum(total) / sum(population) * 100000) %&gt;% .$rate us_murder_rate #&gt; [1] 3.03 which is now a numeric: class(us_murder_rate) #&gt; [1] &quot;numeric&quot; We will see other instances in which using the . is useful. For now, we will only use it to produce numeric vectors from pipelines constructed with dplyr. 19.3 Group then summarize A common operation in data exploration is to first split data into groups and then compute summaries for each group. For example, we may want to compute the average and standard deviation for men’s and women’s heights separately. The group_by function helps us do this. If we type this: heights %&gt;% group_by(sex) #&gt; # A tibble: 1,050 x 2 #&gt; # Groups: sex [2] #&gt; sex height #&gt; &lt;fctr&gt; &lt;dbl&gt; #&gt; 1 Male 75 #&gt; 2 Male 70 #&gt; 3 Male 68 #&gt; 4 Male 74 #&gt; 5 Male 61 #&gt; 6 Female 65 #&gt; # ... with 1,044 more rows the result does not look very different from heights, except we see this Groups: sex [2] when we print the object. Although not immediately obvious from its appearance, this is now a special data frame called a grouped data frame and dplyr functions, in particular summarize, will behave differently when acting on this object. Conceptually you can think of this table as many tables, with the same columns but not necessarily the same number of rows, stacked together in one object. When we summarize the data after grouping, this is what happens: heights %&gt;% group_by(sex) %&gt;% summarize(average = mean(height), standard_deviation = sd(height)) #&gt; # A tibble: 2 x 3 #&gt; sex average standard_deviation #&gt; &lt;fctr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Female 64.9 3.76 #&gt; 2 Male 69.3 3.61 The summarize function applies the summarization to each group separately. For another example, let’s compute the median murder rate in the four regions of the country: murders %&gt;% group_by(region) %&gt;% summarize(median_rate = median(murder_rate)) #&gt; # A tibble: 4 x 2 #&gt; region median_rate #&gt; &lt;fctr&gt; &lt;dbl&gt; #&gt; 1 Northeast 1.80 #&gt; 2 South 3.40 #&gt; 3 North Central 1.97 #&gt; 4 West 1.29 19.4 Sorting data tables When examining a dataset it is often convenient to sort the table by the different columns. We know about the order and sort function, but for ordering entire tables, the dplyr function arrange is useful. For example, here we order the states by population size when we type: murders %&gt;% arrange(population) %&gt;% head() #&gt; state abb region population total murder_rate #&gt; 1 Wyoming WY West 563626 5 0.887 #&gt; 2 District of Columbia DC South 601723 99 16.453 #&gt; 3 Vermont VT Northeast 625741 2 0.320 #&gt; 4 North Dakota ND North Central 672591 4 0.595 #&gt; 5 Alaska AK West 710231 19 2.675 #&gt; 6 South Dakota SD North Central 814180 8 0.983 We get to decide which column to sort by. To see the states by population, from smallest to largest, we arrange by murder_rate instead: murders %&gt;% arrange(murder_rate) %&gt;% head() #&gt; state abb region population total murder_rate #&gt; 1 Vermont VT Northeast 625741 2 0.320 #&gt; 2 New Hampshire NH Northeast 1316470 5 0.380 #&gt; 3 Hawaii HI West 1360301 7 0.515 #&gt; 4 North Dakota ND North Central 672591 4 0.595 #&gt; 5 Iowa IA North Central 3046355 21 0.689 #&gt; 6 Idaho ID West 1567582 12 0.766 Note that the default behavior is to order in ascending order. In dplyr, the function desc transforms a vector so that it is in descending order. To sort the table in descending order we can type: murders %&gt;% arrange(desc(murder_rate)) %&gt;% head() #&gt; state abb region population total murder_rate #&gt; 1 District of Columbia DC South 601723 99 16.45 #&gt; 2 Louisiana LA South 4533372 351 7.74 #&gt; 3 Missouri MO North Central 5988927 321 5.36 #&gt; 4 Maryland MD South 5773552 293 5.07 #&gt; 5 South Carolina SC South 4625364 207 4.48 #&gt; 6 Delaware DE South 897934 38 4.23 Nested sorting If we are ordering by a column with ties, we can use a second column to break the tie. Similarly, a third column can be used to break ties between first and second and so on. Here we order by region then, within region, we order by murder rate: murders %&gt;% arrange(region, murder_rate) %&gt;% head() #&gt; state abb region population total murder_rate #&gt; 1 Vermont VT Northeast 625741 2 0.320 #&gt; 2 New Hampshire NH Northeast 1316470 5 0.380 #&gt; 3 Maine ME Northeast 1328361 11 0.828 #&gt; 4 Rhode Island RI Northeast 1052567 16 1.520 #&gt; 5 Massachusetts MA Northeast 6547629 118 1.802 #&gt; 6 New York NY Northeast 19378102 517 2.668 19.4.0.1 The top \\(n\\) In the code above we have used the function head to avoid having the page fill up with the entire dataset. If we want to see a larger proportion, we can use the top_n function. Here are the first 10 rows: murders %&gt;% top_n(10, murder_rate) #&gt; state abb region population total murder_rate #&gt; 1 Arizona AZ West 6392017 232 3.63 #&gt; 2 Delaware DE South 897934 38 4.23 #&gt; 3 District of Columbia DC South 601723 99 16.45 #&gt; 4 Georgia GA South 9920000 376 3.79 #&gt; 5 Louisiana LA South 4533372 351 7.74 #&gt; 6 Maryland MD South 5773552 293 5.07 #&gt; 7 Michigan MI North Central 9883640 413 4.18 #&gt; 8 Mississippi MS South 2967297 120 4.04 #&gt; 9 Missouri MO North Central 5988927 321 5.36 #&gt; 10 South Carolina SC South 4625364 207 4.48 top_n picks the highest n based on the column given as a second argument. However, the rows are not sorted. If the second argument is left blank, then it returns the first n columns. This means that to see the 10 states with the highest murder rates we can type: murders %&gt;% arrange(desc(murder_rate)) %&gt;% top_n(10) #&gt; Selecting by murder_rate #&gt; state abb region population total murder_rate #&gt; 1 District of Columbia DC South 601723 99 16.45 #&gt; 2 Louisiana LA South 4533372 351 7.74 #&gt; 3 Missouri MO North Central 5988927 321 5.36 #&gt; 4 Maryland MD South 5773552 293 5.07 #&gt; 5 South Carolina SC South 4625364 207 4.48 #&gt; 6 Delaware DE South 897934 38 4.23 #&gt; 7 Michigan MI North Central 9883640 413 4.18 #&gt; 8 Mississippi MS South 2967297 120 4.04 #&gt; 9 Georgia GA South 9920000 376 3.79 #&gt; 10 Arizona AZ West 6392017 232 3.63 Exercises For these exercesis we will be using the data from the survey collected by the United States National Center for Health Statistics (NCHS). This center has conducted a series of health and nutrition surveys since the 1960’s. Starting in 1999 about 5,000 individuals of all ages have been interviewed every year and they complete the health examination component of the survey. Part of the data is made avaialble via the NHANES package which can install using install.packages(&quot;NHANES&quot;) Once you install it you can load the data this way: library(NHANES) data(NHANES) The NHANES data has many missing values. Remember that the main summarization function in R will return NA if any of the entries of the input vector is an NA. Here is an example: library(dslabs) data(na_example) mean(na_example) #&gt; [1] NA sd(na_example) #&gt; [1] NA To ignore the NAs we can use the na.rm argument: mean(na_example, na.rm=TRUE) #&gt; [1] 2.3 sd(na_example, na.rm=TRUE) #&gt; [1] 1.22 Let’s now explore the NHANES data. We will provide some basic facts about blood pressure. First let’s select a group to set the standard. We will use 20-29 year old females. Note that the category is coded with 20-29, with a space in front! The AgeDecade is a categorical variable with these ages. What is the average and standard deviation of systolic blood pressure, as saved in the BPSysAve variable? Save it to a variable called ref. Hint: Use filter and summarize and use the na.rm=TRUE argument when computing the average and standard deviation. You can also filter the NA values using filter. Using only one line of code, assign the average to a numeric variable ref_avg. Hint: Use the code similar to above and then the dot. Now report the min and max values for the same group. Now compute the average and standard deviation for females, but for each age group separately. Note that the age groups are defined by AgeDecade. Hint: rather than filtering by age, filter by Gender and then use group_by. Now do the same for males. We can actually combine both these summaries into one line of code. This is because group_by permits us to group by more than one variable. Obtain one big summary table using group_by(AgeDecade, Gender). For males between the ages of 40-49, compare systolic blood pressure across race as reported in the Race1 variable. Order the resulting table from lowest to highest average systolic blood pressure. "],
["ggplot2.html", "Chapter 20 ggplot2 20.1 The cheat sheet 20.2 The components of a graph 20.3 ggplot objects: a blank slate 20.4 Geometries 20.5 Aesthetic mappings 20.6 Layers 20.7 Tinkering with arguments 20.8 Global versus local aesthetic mappings 20.9 Scales 20.10 Labels and titles 20.11 Categories as colors 20.12 Annotation and shapes 20.13 Adjustments 20.14 Add-on packages 20.15 Putting it all together 20.16 Other geometries 20.17 Grids of plots", " Chapter 20 ggplot2 We have now described several data visualization techniques and are ready to learn how to create them in R. Throughout the book we will be using the ggplot2 package. We can load it, along with dplyr, as part of the tidyverse: Many other approaches are available for creating plots in R. In fact, the plotting capabilities that come with a basic installation of R are already quite powerful. We have seen examples of these already with the functions plot, hist and boxplot. There are also other packages for creating graphics such as grid and lattice. We chose to use ggplot2 in this book because it breaks plots into components in a way that permits beginners to create relatively complex and aesthetically pleasing plots using syntax that is intuitive and relatively easy to remember. One reason ggplot2 is generally more intuitive for beginners is that it uses a grammar of graphics, the gg in ggplot2. This is analogous to the way learning grammar can help a beginner construct hundreds of different sentences by learning just a handful of verbs, nouns and adjectives without having to memorize each specific sentence. Similarly, by learning a handful of ggplot2 building blocks and its grammar, you will be able to create hundreds of different plots. Another reason ggplot2 makes it easier for beginners is that its default behavior is carefully chosen to satisfy the great majority of cases and is aesthetically pleasing. As a result, it is possible to create informative and elegant graphs with relatively simple and readable code. One limitation is that ggplot2 is designed to work exclusively with data tables in which rows are observations and columns are variables. However, a substantial percentage of datasets that beginners work with are, or can be converted into, this format. An advantage of this approach is that, assuming that our data follows this format, it simplifies the code and learning the grammar. 20.1 The cheat sheet To use ggplot2 you will have to learn several functions and arguments. These are hard to memorize so we highly recommend you have the a ggplot2 sheet cheat handy. You can get a copy here: https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf or simply perform a ninternet search for “ggplot2 cheat sheet”. 20.2 The components of a graph We construct a graph that summarizes the US murders dataset: Figure 20.1: Muder totals versus population size for US states. We can clearly see how much states vary across population size and the total number of murders. Not surprisingly, we also see a clear relationship between murder totals and population size. A state falling on the dashed grey line has the same murder rate as the US average. The four geographic regions are denoted with color which depicts how most southern states have murder rates above the average. This data visualization shows us pretty much all the information in the data table. The code needed to make this plot is relatively simple. We will learn to create the plot part by part. The first step in learning ggplot2 is to be able to break a graph apart into components. Let’s break down the plot above and introduce some of the ggplot2 terminology. The main three components to note are: Data: The US murders data table is being summarized. We refer to this as the data component. Geometry: The plot above is a scatter plot. This is referred to as the geometry component. Other possible geometries are barplot, histograms, smooth densities, qqplots, and boxplots. Aesthetic mapping: The x-axis values are used to display population size, the y-axis values are used to display the total number of murders, text is used to identify the states, and colors are used to denote the four different regions. These are the aesthetic mappings component. How we define the mapping depends on what geometry we are using. We also note that: The range of the x-axis and y-axis appears to be defined by the range of the data. They are both on log-scales. We refer to this as the scale component. There are labels, a title, a legend, and we use the style of The Economist magazine. We will now construct the plot piece by piece. We start by loading the dataset: library(dslabs) data(murders) 20.3 ggplot objects: a blank slate The first step in creating a ggplot2 graph is to define a ggplot object. We do this with the function ggplot which initializes the graph. If we read the help file for this function, we see that the first argument is used to specify what data is associated with this object: ggplot(data = murders) We can also pipe the data. So this line of code is equivalent to the one above: murders %&gt;% ggplot() It renders a plot, in this case a blank slate, since no geometry has been defined. The only style choice we see is a grey background. What has happened above is that the object was created and because it was not assigned, it was automatically evaluated. But we can define an object, for example, like this: p &lt;- ggplot(data = murders) class(p) #&gt; [1] &quot;gg&quot; &quot;ggplot&quot; To render the plot associated with this object we simply print the object p. The following two lines of code produce the same plot we see above: print(p) p 20.4 Geometries In ggplot we create graphs by adding layers. Layers can define geometries, compute summary statistics, define what scales to use, or even change styles. To add layers, we use the the symbol +. In general a line of code will look like this: DATA %&gt;% ggplot() + LAYER 1 + LAYER 2 + … + LAYER N Usually, the first added layer defines the geometry. We want to make a scatter plot. So what geometry do we use? Taking a quick look at the cheat sheet we see that the function used to create plots with this geometry is geom_point. Geometry function names follow this pattern: geom and the name of the geometry connected by an underscore. For geom_point to know what to do, we need to provide data and a mapping. We have already connected the object p with the murders data table and if we add as a layer geom_point, we will default to using this data. To find out what mapping are expected we read the Aesthetics section of the help file geom_point help file: Aesthetics geom_point understands the following aesthetics (required aesthetics are in bold): x y alpha colour and, as expected, we see that at least two arguments are required x and y. 20.5 Aesthetic mappings aes will be one of the functions you will most use. This function connects data with what we see on the graph. We refer to this connect as the aesthetic mappings. The outcome of this function is often used as the argument of a geometry function. This example produces a scatter plot of total murders versus population in millions: murders %&gt;% ggplot() + geom_point(aes(x = population/10^6, y = total)) We can drop the x = and y = if we wanted to since these are the first and second expected arguments as seen in the help page. We can also add a layer to the p object that has defined above as p &lt;- ggplot(data = murders): p + geom_point(aes(population/10^6, total)) The scale and labels are defined by default when adding this layer. We also use the variable names from the object component: population and total. The behavior of recognizing the variables from the data component is quite specific to aes. With most functions, if you try to access the values of population or total outside of aes you receive an error. 20.6 Layers A second layer in the plot we wish to make involves adding a label to each point to identify the state. The geom_label and geom_text functions permit us to add text to the plot, without and with a rectangle behind the text respectively. Because each state (each point) has a label, we need an aesthetic mapping to make the connection. By reading the help file, we learn that we supply the mapping between point and label through the label argument of aes. So the code looks like this: p + geom_point(aes(population/10^6, total)) + geom_text(aes(population/10^6, total, label = abb)) We have successfully added a second layer to the plot. As an example of the unique behavior of aes mentioned above, note that this call: p_test &lt;- p + geom_text(aes(population/10^6, total, label = abb)) is fine, whereas this call p_test &lt;- p + geom_text(aes(population/10^6, total), label = abb) will give you an error as abb is not found once it is outside of the aes function. The layer geom_text does not know where to find abb as it is not a global variable. 20.7 Tinkering with arguments Each geometry function has many arguments other than aes and data. They tend to be specific to the function. For example, in the plot we wish to make, the points are larger than the default ones. In the help file we see that size is an aesthetic and we can change it like this: p + geom_point(aes(population/10^6, total), size = 3) + geom_text(aes(population/10^6, total, label = abb)) size is not a mapping, it affects all the points so we do not need to include it inside aes. Now that the points are larger, it is hard to see the labels. If we read the help file for geom_text, we see learn of the nudge_x argument which moves the text slightly to the right: p + geom_point(aes(population/10^6, total), size = 3) + geom_text(aes(population/10^6, total, label = abb), nudge_x = 1) This is preferred as it makes it easier to read the text. 20.8 Global versus local aesthetic mappings In the previous line of code, we define the mapping aes(population/10^6, total) twice, once in each geometry. We can avoid this by using a glogbal aesthetic mapping. We can do this when we define the blank slate ggplot object. Remember that the function ggplot contains an argument that permits us to define aesthetic mappings: args(ggplot) #&gt; function (data = NULL, mapping = aes(), ..., environment = parent.frame()) #&gt; NULL If we define a mapping in ggplot, then all the geometries that are added as layers will default to this mapping. We redefine p: p &lt;- murders %&gt;% ggplot(aes(population/10^6, total, label = abb)) and then we can simply use code as follows: p + geom_point(size = 3) + geom_text(nudge_x = 1.5) We keep the size and nudge_x argument in geom_point and geom_text respectively because we only want to increase the size of points and nudge only the labels. Also note that the geom_point function does not need a label argument and therefore ignores it. If necessary, we can override the global mapping by defining a new mapping within each layer. These local definitions override the global. Here is an example: p + geom_point(size = 3) + geom_text(aes(x = 10, y = 800, label = &quot;Hello there!&quot;)) Clearly, the second call to geom_text does not use the population and total. 20.9 Scales First, our desired scales are in log-scale. This is not the default so this change needs to be added through a scales layer. A quick look at the cheat sheet reveals the scale_x_continuous lets us control the behavior of scales. We use them like this: p + geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_continuous(trans = &quot;log10&quot;) + scale_y_continuous(trans = &quot;log10&quot;) Because we are in the log-scale now, the nudge must be made smaller. This particular transformation is so common that ggplot2 provides specialized functions: p + geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() 20.10 Labels and titles Similarly, the cheat sheet quickly reveals that to change labels and add a title, we use the following functions: p + geom_point(size = 3) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + xlab(&quot;Populations in millions (log scale)&quot;) + ylab(&quot;Total number of murders (log scale)&quot;) + ggtitle(&quot;US Gun Murders in US 2010&quot;) We are almost there! All we have left to do is add color, a legend and optional changes to the style. 20.11 Categories as colors We can change the color of the points using the col argument in the geom_point function. To facilitate exposition, we will redefine p to be everything except the points layer: p &lt;- murders %&gt;% ggplot(aes(population/10^6, total, label = abb)) + geom_text(nudge_x = 0.05) + scale_x_log10() + scale_y_log10() + xlab(&quot;Populations in millions (log scale)&quot;) + ylab(&quot;Total number of murders (log scale)&quot;) + ggtitle(&quot;US Gun Murders in US 2010&quot;) and then test out what happens by adding different calls to geom_point. We can make all the points blue by adding the color argument: p + geom_point(size = 3, color =&quot;blue&quot;) This, of course, is not what we want. We want to assign color depending on the geographical region. A nice default behavior of ggplot2 is that if we assign a categorical variable to color, it automatically assigns a different color to each category. It also adds a legend! To map each point to a color, we need to use aes since this is a mapping. We use the following code: p + geom_point(aes(col=region), size = 3) The x and y mappings are inherited from those already defined in p. So we do not redefine them. We also move aes to the first argument since that is where the mappings are expected in this call. Here we see yet another useful default behavior: ggplot2 has automatically added a legend that maps color to region. 20.12 Annotation and shapes We often want to add shapes or annotation to figures that are not derived directly from the aesthetic mapping. Examples in include labels, boxes, shaded areas and lines. Here we want to add a line that represents the average murder rate for the entire country. Once we determine the per million rate to be \\(r\\), this line is defined by the formula: \\(y = r x\\) with \\(y\\) and \\(x\\) our axes: total murders and population in millions respectively. In the log-scale this line turns into: \\(\\log(y) = \\log(r) + \\log(x)\\). So in our plot it’s a line with slope 1 and intercept \\(\\log(r)\\). To compute this value we use what we our dplyr skills: r &lt;- murders %&gt;% summarize(rate = sum(total) / sum(population) * 10^6) %&gt;% .$rate To add a line we use the geom_abline function. ggplot2 uses ab in the name to remind us we are supplying the intercept (a) and slope (b). The default line has slope 1 and intercept 0 so we only have to define the intercept: p + geom_point(aes(col=region), size = 3) + geom_abline(intercept = log10(r)) Here geom_abline does not use any information from the data object. We can change the line type and color of the lines using arguments. Also we draw it first so it doesn’t go over our points. p &lt;- p + geom_abline(intercept = log10(r), lty = 2, color = &quot;darkgrey&quot;) + geom_point(aes(col=region), size = 3) Note that we redefined p. 20.13 Adjustments The default plots created by ggplot2 are already very useful. However, we frequently need to make minor tweaks to the default behavior. Although it is not always obvious how to make these even with the cheat sheet, ggplot2 is very flexible. For example, we can make changes to the legend via the scale_color_discrete function. In our plot the word region is capitalized and we can change it like this: p &lt;- p + scale_color_discrete(name = &quot;Region&quot;) 20.14 Add-on packages The power of ggplot2 is augmented further due to the availability of add-on packages. The remaining changes needed to put the finishing touches on our plot require the ggthemes and ggrepel packages. The style of a ggplot2 graph can be changed using the theme functions. Several themes are included as part of the ggplot2 package. In fact, for most of the plots in this book, we use a function in the dslabs package that automatically sets a default theme: ds_theme_set() Many other themes are added by the package ggthemes. Among those are the theme_economist theme that we used. After installing the package, you can change the style by adding a layer like this: library(ggthemes) p + theme_economist() You can see how some of the other themes look by simply changing the function. For instance, you might try the theme_fivethirtyeight() theme instead. The final difference has to do with the position of the labels. In our plot, some of the labels fall on top of each other. The add-on package ggrepel includes a geometry that adds labels while ensuring that they don’t fall on top of each other. We simply change geom_text with geom_text_repell. 20.15 Putting it all together Now that we are done testing, we can write one piece of code that produces our desired plot from scratch. library(ggthemes) library(ggrepel) ### First define the slope of the line r &lt;- murders %&gt;% summarize(rate = sum(total) / sum(population) * 10^6) %&gt;% .$rate ## Now make the plot murders %&gt;% ggplot(aes(population/10^6, total, label = abb)) + geom_abline(intercept = log10(r), lty = 2, color = &quot;darkgrey&quot;) + geom_point(aes(col=region), size = 3) + geom_text_repel() + scale_x_log10() + scale_y_log10() + xlab(&quot;Populations in millions (log scale)&quot;) + ylab(&quot;Total number of murders (log scale)&quot;) + ggtitle(&quot;US Gun Murders in US 2010&quot;) + scale_color_discrete(name = &quot;Region&quot;) + theme_economist() 20.16 Other geometries Now let’s try to make the summary plots we have described in this chapter. Histogram Let’s start with the histogram. In a first step we need to use dplyr to filter the data: heights %&gt;% filter(sex==&quot;Male&quot;) Once we have a dataset, the next step is deciding what geometry we need. If you guessed geom_histogram, you guessed correctly. Looking at the help file for this function we learn that the only required argument is x, the variable for which we will construct a histogram. The code looks like this: p &lt;- heights %&gt;% filter(sex==&quot;Male&quot;) %&gt;% ggplot(aes(x = height)) p + geom_histogram() #&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. As before, we can drop the x =. This call gives us a message: stat_bin() using bins = 30. Pick better value with binwidth. We previously used a bin size of 1 inch, so the code looks like this: p + geom_histogram(binwidth = 1) Finally, if for aesthetic reasons we want to add color, we use the arguments described in the help file. We also add labels and a title: Density To create a smooth density, we need a different geometry: we used geom_density instead. p + geom_density() To fill in with color, we can use the fill argument. p + geom_density(fill=&quot;blue&quot;) QQ-plots For qq-plots we use the geom_qq geometry. From the help file, we learn that we need to specify the sample (we will learn about samples in a later chapter). p &lt;- heights %&gt;% filter(sex==&quot;Male&quot;) %&gt;% ggplot(aes(sample = height)) p + geom_qq() By default the sample variable is compared to a normal distribution with average 0 and standard deviation 1. To change this, again from the help file, we use the dparams arguments. params &lt;- heights %&gt;% filter(sex==&quot;Male&quot;) %&gt;% summarize(mean = mean(height), sd = sd(height)) p + geom_qq(dparams = params) Adding an identity line is as simple as assigning another layer. For straight lines, we use the geom_abline function. To help you remember the name of this function, remember that the ab in front of line serves to remind us that we need to supply an intercept (a) and slope (b) to draw the line \\(y=a+bx\\). The default is the identity a=0 and b=1 p + geom_qq(dparams = params) + geom_abline() Another option here is to scale the data first and the make a qqplot against the standard normal: heights %&gt;% filter(sex==&quot;Male&quot;) %&gt;% ggplot(aes(sample = scale(height))) + geom_qq() + geom_abline() 20.17 Grids of plots There are often reasons to graph plots next to each other. The gridExtra package permits us to do that: p &lt;- heights %&gt;% filter(sex==&quot;Male&quot;) %&gt;% ggplot(aes(x = height)) p1 &lt;- p + geom_histogram(binwidth = 1, fill = &quot;blue&quot;, col=&quot;black&quot;) p2 &lt;- p + geom_histogram(binwidth = 2, fill = &quot;blue&quot;, col=&quot;black&quot;) p3 &lt;- p + geom_histogram(binwidth = 3, fill = &quot;blue&quot;, col=&quot;black&quot;) To print them all side-by-side, we can use the function grid.arrange in the gridExtra package: library(gridExtra) grid.arrange(p1,p2,p3, ncol = 3) "],
["case-study-trends-in-world-health-and-economics.html", "Chapter 21 Case study: trends in world health and economics 21.1 Example 1: Life expectancy and fertility rates 21.2 Faceting 21.3 Fixed scales for better comparisons 21.4 Time series plots 21.5 Labels for legends 21.6 Example 2: Income distribution 21.7 Transformations 21.8 Stratify and boxplot 21.9 Comparing distributions 21.10 Ecological fallacy", " Chapter 21 Case study: trends in world health and economics In this section we will demonstrate how relatively simple ggplot2 code can create insightful and aesthetically pleasing plots that help us better understand trends in world health and economics. We later augment the code somewhat to perfect the plots and describe some general data visualization principles. 21.1 Example 1: Life expectancy and fertility rates Hans Rosling was the co-founder of the Gapminder Foundation, an organization dedicated to educating the public by using data to dispel common myths about the so-called developing world. The organization uses data to show how actual trends in health and economics contradict the narratives that emanate from sensationalist media coverage of catastrophes, tragedies and other unfortunate events. As stated in the Gapminder Foundation’s website: Journalists and lobbyists tell dramatic stories. That’s their job. They tell stories about extraordinary events and unusual people. The piles of dramatic stories pile up in peoples’ minds into an over-dramatic worldview and strong negative stress feelings: “The world is getting worse!”, “It’s we vs. them!” , “Other people are strange!”, “The population just keeps growing!” and “Nobody cares!” Hans Rosling conveyed actual data-based trends in a dramatic way of his own, using effective data visualization. This section is based on two talks that exemplify this approach to education: New Insights on Poverty and The Best Stats You’ve Ever Seen. Specifically, in this section, we use data to attempt to answer the following two questions: Is it a fair characterization of today’s world to say it is divided into western rich nations and the developing world in Africa, Asia and Latin America? Has income inequality across countries worsened during the last 40 years? To answer these question we will be using the gapminder dataset provided in dslabs. This dataset was created using a number of spreadsheets available from the Gapminder Foundation. You can access the table like this: library(dslabs) data(gapminder) head(gapminder) #&gt; country year infant_mortality life_expectancy fertility #&gt; 1 Albania 1960 115.4 62.9 6.19 #&gt; 2 Algeria 1960 148.2 47.5 7.65 #&gt; 3 Angola 1960 208.0 36.0 7.32 #&gt; 4 Antigua and Barbuda 1960 NA 63.0 4.43 #&gt; 5 Argentina 1960 59.9 65.4 3.11 #&gt; 6 Armenia 1960 NA 66.9 4.55 #&gt; population gdp continent region #&gt; 1 1636054 NA Europe Southern Europe #&gt; 2 11124892 1.38e+10 Africa Northern Africa #&gt; 3 5270844 NA Africa Middle Africa #&gt; 4 54681 NA Americas Caribbean #&gt; 5 20619075 1.08e+11 Americas South America #&gt; 6 1867396 NA Asia Western Asia Hans Rosling’s quiz As done in the New Insights on Poverty video, we start by testing our knowledge regarding differences in child mortality across different countries. For each of the six pairs of countries below, which country do you think had the highest child mortality in 2015? Which pairs do you think are most similar? Sri Lanka or Turkey Poland or South Korea Malaysia or Russia Pakistan or Vietnam Thailand or South Africa When answering these questions without data, the non-European countries are typically picked as having higher child mortality rates: Sri Lanka over Turkey, South Korea over Poland, and Malaysia over Russia. It is also common to assume that countries considered to be part of the developing world: Pakistan, Vietnam, Thailand and South Africa, have similarly high mortality rates. To answer these questions with data we can use dplyr. For example, for the first comparison we see that: library(tidyverse) gapminder %&gt;% filter(year == 2015 &amp; country %in% c(&quot;Sri Lanka&quot;,&quot;Turkey&quot;)) %&gt;% select(country, infant_mortality) #&gt; country infant_mortality #&gt; 1 Sri Lanka 8.4 #&gt; 2 Turkey 11.6 Turkey has the higher rate. We can use this code on all comparisons and find the following: country infant_mortality country1 infant_mortality1 Sri Lanka 8.4 Turkey 11.6 Poland 4.5 South Korea 2.9 Malaysia 6.0 Russia 8.2 Pakistan 65.8 Vietnam 17.3 Thailand 10.5 South Africa 33.6 We see that the European countries on this list have higher child mortality rates: Poland has a higher rate than South Korea, and Russia has a higher rate than Malaysia. We also see that Pakistan has a much higher rate than Vietnam, and South Africa has a much higher rate than Thailand. It turns out that most people do worse than if they were guessing, which implies that more than ignorant, we are misinformed. A scatterplot The reason for this stems from the preconceived notion that the world is divided into two groups: the western world (Western Europe and North America), characterized by long life spans and small families, versus the developing world (Africa, Asia, and Latin America) characterized by short life spans and and large families. But, does the data support this dichotomous view? The necessary data to answer this question is also available in our gapminder table. Using our newly learned data visualization skills we will be able to tackle this challenge. In order to analyze this world view, our first plot is a scatter plot of life expectancy versus fertility rates (average number of children per woman). We start by looking at data from about 50 years ago, when perhaps this view was first cemented in our minds. filter(gapminder, year==1962) %&gt;% ggplot( aes(fertility, life_expectancy)) + geom_point() Most points fall into two distinct categories: Life expectancy around 70 years and 3 or less children per family Life expectancy lower then 65 years and more than 5 children per family. To confirm that indeed these countries are from the regions we expect, we can use color to represent continent. filter(gapminder, year==1962) %&gt;% ggplot( aes(fertility, life_expectancy, color = continent)) + geom_point() So in 1962, “the west versus developing world” view was grounded in some reality. But is this still the case 50 years later? 21.2 Faceting We could easily plot the 2012 data in the same way we did for 1962. But to compare, side by side plots are preferable. In ggplot2 we can achieve this by faceting variables: we stratify the data by some variable and make the same plot for each strata. To achieve faceting we add a layer with the function facet_grid, which automatically separates the plots. This function lets you facet by up to two variables using columns to represent one variable and rows to represent the other. The function expects the row and column variables to be separated by a ~. Here is an example of a scatter plot with facet_grid added as the last layer: filter(gapminder, year%in%c(1962, 2012)) %&gt;% ggplot(aes(fertility, life_expectancy, col = continent)) + geom_point() + facet_grid(continent~year) We see a plot for each continent/year pair. However, this is just an example and more than what we want, which is simply to compare 1962 and 2012. In this case, there is just one variable and we use . to let facet know that we are not using one of the variables: filter(gapminder, year%in%c(1962, 2012)) %&gt;% ggplot(aes(fertility, life_expectancy, col = continent)) + geom_point() + facet_grid( . ~ year) This plot clearly shows that the majority of countries have moved from the developing world cluster to the western world one. In 2012, the western versus developing world view no longer makes sense. This is particularly clear when comparing Europe to Asia, which includes several countries that have made great improvements. facet_wrap To explore how this transformation happened through the years, we can make the plot for several years. For example, we can add 1970, 1980, 1990, and 2000. If we do this, we will not want all the plots on the same row, the default behavior of facet_grid, since they will become too thin to show the data. Instead we will want to use multiple rows and columns. The function facet_wrap permits us to do this by automatically wrapping the series of plots so that each display has viewable dimensions: years &lt;- c(1962, 1980, 1990, 2000, 2012) continents &lt;- c(&quot;Europe&quot;, &quot;Asia&quot;) gapminder %&gt;% filter(year %in% years &amp; continent %in% continents) %&gt;% ggplot( aes(fertility, life_expectancy, col = continent)) + geom_point() + facet_wrap(~year) This plot clearly shows how most Asian countries have improved at a much faster rate than European ones. 21.3 Fixed scales for better comparisons The default choice of the range of the axes is an important one. When not using facet, this range is determined by the data shown in the plot. When using facet, this range is determined by the data shown in all plots and therefore kept fixed across plots. This makes comparisons across plots much easier. For example, in the above plot we can see that life expectancy has increased and the fertility has decreased across most countries. We see this because the cloud of points moves. This is not the case if we adjust the scales: In the plot above we have to pay special attention to the range to notice that the plot on the right has a larger life expectancy. 21.4 Time series plots The visualizations above effectively illustrates that data no longer supports the western versus developing world view. Once we see these plots, new questions emerge. For example, which countries are improving more, which ones less? Was the improvement constant during the last 50 years or was it more accelerated during certain periods? For a closer look that may help answer these questions, we introduce time series plots. Time series plots have time in the x-axis and an outcome or measurement of interest on the y-axis. For example, here is a trend plot of United States fertility rates: gapminder %&gt;% filter(country == &quot;United States&quot;) %&gt;% ggplot(aes(year,fertility)) + geom_point() We see that the trend is not linear at all. Instead there is sharp drop during the 60s and 70s to below 2. Then the trend comes back to 2 and stabilizes during the 90s. When the points are regularly and densely spaced, as they are here, we create curves by joining the points with lines, to convey that these data are from a single country. To do this we use the geom_line function instead of geom_point. gapminder %&gt;% filter(country == &quot;United States&quot;) %&gt;% ggplot(aes(year,fertility)) + geom_line() This is particularly helpful when we look at two countries. If we subset the data to include two countries, one from Europe and one from Asia, then adapt the code above: countries &lt;- c(&quot;South Korea&quot;,&quot;Germany&quot;) gapminder %&gt;% filter(country %in% countries) %&gt;% ggplot(aes(year,fertility)) + geom_line() Unfortunately, this is not the plot that we want. Rather than a line for each country, the points for both countries are joined. This is actually expected since we have not told ggplot anything about wanting two separate lines. To let ggplot know that there are two curves that need to be made separately, we assign each point to a group, one for each country: countries &lt;- c(&quot;South Korea&quot;,&quot;Germany&quot;) gapminder %&gt;% filter(country %in% countries) %&gt;% ggplot(aes(year,fertility, group = country)) + geom_line() #&gt; Warning: Removed 2 rows containing missing values (geom_path). But which line goes with which country? We can assign colors to make this distinction. A useful side-effect of using the color argument to assign different colors to the different countries is that the data is automatically grouped: countries &lt;- c(&quot;South Korea&quot;,&quot;Germany&quot;) gapminder %&gt;% filter(country %in% countries) %&gt;% ggplot(aes(year,fertility, col = country)) + geom_line() #&gt; Warning: Removed 2 rows containing missing values (geom_path). The plot clearly shows how South Korea’s fertility rate dropped drastically during the 60s and 70s and by 1990 had a similar rate to that of Germany. 21.5 Labels for legends For trend plots we recommend labeling the lines rather than using legends since the viewer can quickly see which line is which country. This suggestion actually applies to most plots: labeling is usually preferred over legends. We demonstrate how we can do this using the life expectancy data. We define a data table with the label locations and then use a second mapping just for these labels: labels &lt;- data.frame(country = countries, x = c(1975,1965), y = c(60,72)) gapminder %&gt;% filter(country %in% countries) %&gt;% ggplot(aes(year, life_expectancy, col = country)) + geom_line() + geom_text(data = labels, aes(x, y, label = country), size = 5) + theme(legend.position = &quot;none&quot;) The plot clearly shows how an improvement in life expectancy followed the drops in fertility rates. In 1960 Germans lived 15 years longer than South Koreans, although by 2010 the gap is completely closed. It exemplifies the improvement that many non-western countries have achieved in the last 40 years. 21.6 Example 2: Income distribution Another commonly held notion is that wealth distribution across the world has become worse during the last decades. When general audiences are asked if poor countries have become poorer and rich countries become richer, the majority answers yes. By using stratification, histograms, smooth densities, and boxplots, we will be able to understand if this is in fact the case. We will also learn how transformations can sometimes help provide more informative summaries and plots. 21.7 Transformations The gapminder data table includes a column with the countries gross domestic product (GDP). GDP measures the market value of goods and services produced by a country in a year. The GDP per person is often used as a rough summary of a country’s wealth. Here we divide this quantity by 365 to obtain the more interpretable measure dollars per day. Using current US dollars as a unit, a person surviving on an income of less than $2 a day is defined to be living in absolute povery. We add this variable to the data table: gapminder &lt;- gapminder %&gt;% mutate(dollars_per_day = gdp/population/365) The GDP values are adjusted for inflation and represent current US dollars, so these values are meant to be comparable across the years. Of course, these are country averages and within each country there is much variability. All the graphs and insights described below relate to country averages and not to individuals. Country income distribution Here is a histogram of per day incomes from 1970: past_year &lt;- 1970 gapminder %&gt;% filter(year == past_year &amp; !is.na(gdp)) %&gt;% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = &quot;black&quot;) We use the color = &quot;black&quot; argument to draw a boundary and clearly distinguish the bins. In this plot we see that for the majority of countries, averages are below $10 a day. However, the majority of the x-axis is dedicated to the 35 countries with averages above $10. So the plot is not very informative about countries with values below $10 a day. It might be more informative to quickly be able to see how many countries have average daily incomes of about $1 (extremely poor), $2 (very poor), $4 (poor), $8 (middle), $16 (well off), $32 (rich), $64 (very rich) per day. These changes are multiplicative and log transformations convert multiplicative changes into additive ones: when using base 2, a doubling of a value turns into an increase by 1. Here is the distribution if we apply a log base 2 transform: gapminder %&gt;% filter(year == past_year &amp; !is.na(gdp)) %&gt;% ggplot(aes(log2(dollars_per_day))) + geom_histogram(binwidth = 1, color = &quot;black&quot;) In a way this provides a close up of the mid to lower income countries. Which base? In the case above we used base 2 in the log transformations. Other common choices are base \\(\\mathrm{e}\\) (the natural log) and base 10. In general, we do not recommend using the natural log for data exploration and visualization. This is because while \\(2^2, 2^3, 2^4, \\dots\\) or \\(10^1, 10^2, \\dots\\) are easy to compute in our heads, the same is not true for \\(\\mathrm{e}^2, \\mathrm{e}^3, \\dots\\). In the dollars per day example, we used base 2 instead of base 10 because the resulting range is easier to interpret. The range of the values being plotted is 0.327, 48.885. In base 10 this turns into a range that includes very few integers: just 0 and 1. With base two, our range includes -2, -1, 0, 1, 2, 3, 4 and 5. It is easier to compute \\(2^x\\) and \\(10^x\\) when \\(x\\) is an integer and between -10 and 10, so we prefer to have smaller integers in the scale. Another consequence of a limited range is that choosing the binwidth is more challenging. With log base 2, we know that a binwidth of 1 will translate to a bin with range \\(x\\) to \\(2x\\). For an example in which base 10 makes more sense consider population sizes. A log base 10 makes more sense since the range for these is: filter(gapminder, year == past_year) %&gt;% summarize(min = min(population), max = max(population)) #&gt; min max #&gt; 1 46075 8.09e+08 Here is the histogram of the transformed values: gapminder %&gt;% filter(year == past_year) %&gt;% ggplot(aes(log10(population))) + geom_histogram(binwidth = 0.5, color = &quot;black&quot;) In the above, we quickly see that country populations range between ten thousand and ten billion. Transform the values or the scale? There are two ways we can use log transformations in plots. We can log the values before plotting them or use log scales in the axes. Both approaches are useful and have different strengths. If we log the data, we can more easily interpret intermediate values in the scale. For example, if we see —-1—-x—-2——–3—- for log transformed data, we know that the value of \\(x\\) is about 1.5. If the scales are logged: —-1—-x—-10——100— then, to determine x, we need to compute \\(10^{1.5}\\), which is not easy to do in our heads. The advantage of using logged scales is that we see the original values on the axes. However, the advantage of showing logged scales is that the original values are displayed in the plot, which are easier to interpret. For example, we would see “32 dollars a day” instead of “5 log base 2 dollar a day”. As we learned earlier, if we want to scale the axis with logs we can use the scale_x_ccontinuous function. So instead of logging the values first, we apply this layer: gapminder %&gt;% filter(year == past_year &amp; !is.na(gdp)) %&gt;% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = &quot;black&quot;) + scale_x_continuous(trans = &quot;log2&quot;) Note that the log base 10 transformation has it’s own function: scale_x_log10(), but currently base 2 does not. Although we could easily define our own. There are other transformations available through the trans argument. As we learn later on, the square root (sqrt) transformation, for example, is useful when considering counts. The logistic transformation (logit) is useful when plotting proportions between 0 and 1. The reverse transformation is useful when we want smaller values to be on the right or on top. Modes In statistics these bumps are sometimes referred to as modes. The mode of a distribution is the value with the highest frequency. The mode of the normal distribution is the average. When a distribution, like the one above, doesn’t monotonically decrease from the mode, we call the locations where it goes up and down again local modes and say that the distribution has multiple modes. The histogram above suggest that the 1970 country income distribution has two modes: one at about 2 dollars per day (1 in the log 2 scale) and another at about 32 dollars per day (5 in the log 2 scale). This bimodality is consistent with a dichotomous world made up of countries with average incomes less than $8 (3 in the log 2 scale) a day and countries above that. 21.8 Stratify and boxplot The histogram showed us that the income distribution values show a dichotomy. However, the histogram does not show us if the two groups of countries are west versus the developing world. To see distributions by geographical region, we first stratify the data into regions and then examine the distribution for each. Because of the number of regions n_distinct(gapminder$region) #&gt; [1] 22 looking at histograms or smooth densities for each will not be useful. Instead, we can stack boxplots next to each other: p &lt;- gapminder %&gt;% filter(year == past_year &amp; !is.na(gdp)) %&gt;% ggplot(aes(region, dollars_per_day)) p + geom_boxplot() Now we can’t read the region names because the default gpplot2 behavior is to write the labels horizontally and, here, we run out of room. We can easily fix this by rotating the labels. Consulting the cheat sheet we find we can rotate the names by changing the theme through element_text. The hjust=1 justifies the text so that it is next to the axis. p + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) We can already see that there is indeed a “west versus the rest”&quot; dichotomy. Do not order alphabetically There are a few more adjustments we can make to this plot that help uncover this reality. First, it helps to order the regions in the boxplots from poor to rich rather than alphabetically. This can be achieved using the reorder function. This function lets us change the order of the levels of a factor variable based on a summary computed on a numeric vector. Remember that many graphing functions coerce character vectors into a factor. The default behavior resutls in alphabetically ordered levels: fac &lt;- factor(c(&quot;Asia&quot;, &quot;Asia&quot;, &quot;West&quot;, &quot;West&quot;, &quot;West&quot;)) levels(fac) #&gt; [1] &quot;Asia&quot; &quot;West&quot; value &lt;- c(10, 11, 12, 6, 4) fac &lt;- reorder(fac, value, FUN = mean) levels(fac) #&gt; [1] &quot;West&quot; &quot;Asia&quot; Second, we can use color to distinguish the different continents, a visual cue that helps find specific regions. Here is the code: p &lt;- gapminder %&gt;% filter(year == past_year &amp; !is.na(gdp)) %&gt;% mutate(region = reorder(region, dollars_per_day, FUN = median)) %&gt;% ggplot(aes(region, dollars_per_day, fill = continent)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(&quot;&quot;) p This plot shows two clear groups, with the rich group composed of North America, Northern and Western Europe, New Zealand and Australia. As with the histogram, if we remake the plot using a log scale: p + scale_y_continuous(trans = &quot;log2&quot;) we are better able to see differences within the developing world. Show the data In many cases we do not show the data because it adds clutter to the plot and obfuscates the message. In the example above, we don’t have that many points so adding them actually lets us see all the data. We can add this layer using geom_point(): p + scale_y_continuous(trans = &quot;log2&quot;) + geom_point(show.legend = FALSE) 21.9 Comparing distributions The exploratory data analysis above has revealed two characteristics about average income distribution in 1970. Using a histogram we found a bimodal distribution with the modes relating to poor and rich countries. Then by stratifying by region and examining boxplots, we found that the rich countries were mostly in Europe and Northern America, along with Australia and New Zealand. We define a vector with these regions: west &lt;- c(&quot;Western Europe&quot;, &quot;Northern Europe&quot;, &quot;Southern Europe&quot;, &quot;Northern America&quot;, &quot;Australia and New Zealand&quot;) Now we want to focus on comparing the differences in distributions across time. We start by confirming that the bimodality observed in 1970 is explained by a “west versus developing world”&quot; dichotomy. We do this by creating histograms for the previously identified groups. We create the two groups with an ifelse inside a mutate and then we use facet_grid to make a histogram for each group: gapminder %&gt;% filter(year == past_year &amp; !is.na(gdp)) %&gt;% mutate(group = ifelse(region%in%west, &quot;West&quot;, &quot;Developing&quot;)) %&gt;% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = &quot;black&quot;) + scale_x_continuous(trans = &quot;log2&quot;) + facet_grid(. ~ group) Now we are ready to see if the separation is worse today than it was 40 years ago. We do this by faceting by both region and year: past_year &lt;- 1970 present_year &lt;- 2010 gapminder %&gt;% filter(year %in% c(past_year, present_year) &amp; !is.na(gdp)) %&gt;% mutate(group = ifelse(region%in%west, &quot;West&quot;, &quot;Developing&quot;)) %&gt;% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = &quot;black&quot;) + scale_x_continuous(trans = &quot;log2&quot;) + facet_grid(year ~ group) Before we interpret the findings of this plot, we notice that there are more countries represented in the 2010 histograms than in 1970: the total counts are larger. One reason for this is that several countries were founded after 1970. For example, the Soviet Union divided into several countries including Russia and Ukraine during the 1990s. Another reason is that data was available for more countries in 2010. We remake the plots using only countries with data available for both years. In the data wrangling chapter we will learn tidyverse tools that permit us to write efficient code for this, but here we can use simple code using the intersect function: country_list_1 &lt;- gapminder %&gt;% filter(year == past_year &amp; !is.na(dollars_per_day)) %&gt;% .$country country_list_2 &lt;- gapminder %&gt;% filter(year == present_year &amp; !is.na(dollars_per_day)) %&gt;% .$country country_list &lt;- intersect(country_list_1, country_list_2) These 108 account for 86 % of the world population, so this subset should be representative. Let’s remake the plot but only for this subset by simply adding country %in% country_list to the filter function: We now see that while the rich countries have become a bit richer, percentage-wise, the poor countries appear to have improved more. In particular, we see that the proportion of developing countries earning more than $16 a day increases substantially. To see which specific regions improved the most, we can remake the boxplots we made above but now adding the year 2010: p &lt;- gapminder %&gt;% filter(year %in% c(past_year, present_year) &amp; country %in% country_list) %&gt;% ggplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab(&quot;&quot;) + scale_y_continuous(trans = &quot;log2&quot;) and then using facet to compare the two years: p + geom_boxplot(aes(region, dollars_per_day, fill = continent)) + facet_grid(year~.) Here, we pause to introduce another powerful ggplot2 feature. Because we want to compare each region before and after, it would be convenient to have the 1970 boxplot next to the 2010 boxplot for each region. In general, comparisons are easier when data are plotted next to each other. So, instead of faceting, we keep the data from each year together and ask ggplot2 to color (or fill) them depending on the year. Note that groups are automatically separated by year and each pair of boxplots drawn next to each other. Finally, because year is a number, we turn it into a factor since ggplot2 automatically assigns a color to each category of a factor: p + geom_boxplot(aes(region, dollars_per_day, fill = factor(year))) Finally, we point out that if what we are most interested is in comparing before and after values, it might make more sense to plot the ratios, or difference in the log scale. We are still not ready to learn to code this, but here is what the plot would look like: Density plots We have used data exploration to discover that the income gap between rich and poor countries has narrowed considerably during the last 40 years. We used a series of histograms and boxplots to see this. Here we suggest a succinct way to convey this message with just one plot. We will use smooth density plots. Let’s start by noting that density plots for income distribution in 1970 and 2010 deliver the message that the gap is closing: gapminder %&gt;% filter(year %in% c(past_year, present_year) &amp; country %in% country_list) %&gt;% ggplot(aes(dollars_per_day)) + geom_density(fill = &quot;grey&quot;) + scale_x_continuous(trans = &quot;log2&quot;) + facet_grid(year~.) In the 1970 plot we see two clear modes: poor and rich countries. In 2010 it appears that some of the poor countries have shifted towards the right, closing the gap. The next message we need to covey is that the reason for this change in distribution is that poor countries became richer, rather than some rich countries becoming poorer. To do this we need to assign a color to the groups we identified during data exploration. However, we first need to learn how to make these smooth densities in a way that preserves information on the number of countries in each group. To understand why we need this, note the discrepancy in the size of each group: group n Developing 87 West 21 Yet when we overlay two densities, the default is to have the area represented by each distribution add up to 1 regardless of the size of each group: gapminder %&gt;% filter(year %in% c(past_year, present_year) &amp; country %in% country_list) %&gt;% mutate(group = ifelse(region %in% west, &quot;West&quot;, &quot;Developing&quot;)) %&gt;% ggplot(aes(dollars_per_day, fill = group)) + scale_x_continuous(trans = &quot;log2&quot;) + geom_density(alpha = 0.2) + facet_grid(year ~ .) which make it appear as if there are the same number of countries in each group. To change this, we will need to learn to access computed variables with geom_density function. Accessing computed variables To have the areas of these densities be proportional to the size of the groups, we can simply multiply the y-axis values by the size of the group. From the geom_density help file we see that the functions compute a variable called count that does exactly this. We want this variable to be on the y-axis rather than the density. In ggplot2 we access these variables by surrounding the name with two dots ... So we will use the following mapping: aes(x = dollars_per_day, y = ..count..) We can now create the desired plot by simply changing the mapping in the previous code chunk: p &lt;- gapminder %&gt;% filter(year %in% c(past_year, present_year) &amp; country %in% country_list) %&gt;% mutate(group = ifelse(region %in% west, &quot;West&quot;, &quot;Developing&quot;)) %&gt;% ggplot(aes(dollars_per_day, y = ..count.., fill = group)) + scale_x_continuous(trans = &quot;log2&quot;) p + geom_density(alpha = 0.2) + facet_grid(year ~ .) If we want the densities to be smoother, we use the bw argument. We tried a few and decided on 0.75: p + geom_density(alpha = 0.2, bw = 0.75) + facet_grid(year ~ .) This plot now shows what is happening very clearly. The developing world distribution is changing. A third mode appears consisting of the countries that most narrowed the gap. 21.9.1 ‘case_when’ We can actually make this figure somewhat more informative. From the exploratory data analysis we noticed that many of the countries that most improved were from Asia. We can easily alter the plot to show key regions separately. We introduce the case_when function which is useful for defining groups. It currently does not have a data argument (this might change) so we need to access the components of our data table using the dot placeholder: gapminder &lt;- gapminder %&gt;% mutate(group = case_when( .$region %in% west ~ &quot;West&quot;, .$region %in% c(&quot;Eastern Asia&quot;, &quot;South-Eastern Asia&quot;) ~ &quot;East Asia&quot;, .$region %in% c(&quot;Caribbean&quot;, &quot;Central America&quot;, &quot;South America&quot;) ~ &quot;Latin America&quot;, .$continent == &quot;Africa&quot; &amp; .$region != &quot;Northern Africa&quot; ~ &quot;Sub-Saharan Africa&quot;, TRUE ~ &quot;Others&quot;)) We turn this group variable into a factor to control the order of the levels: gapminder &lt;- gapminder %&gt;% mutate(group = factor(group, levels = c(&quot;Others&quot;, &quot;Latin America&quot;, &quot;East Asia&quot;,&quot;Sub-Saharan Africa&quot;, &quot;West&quot;))) We pick this particular order for a reason that becomes clear later. Now we can now easily plot the densities for each region. We use color and size to clearly see the tops: p &lt;- gapminder %&gt;% filter(year %in% c(past_year, present_year) &amp; country %in% country_list) %&gt;% ggplot(aes(dollars_per_day, y = ..count.., fill = group, color = group)) + scale_x_continuous(trans = &quot;log2&quot;) p + geom_density(alpha = 0.2, bw = 0.75, size = 2) + facet_grid(year ~ .) The plot is cluttered and somewhat hard to read. A clearer picture is sometimes achieved by stacking the densities on top of each other: p + geom_density(alpha = 0.2, bw = 0.75, position = &quot;stack&quot;) + facet_grid(year ~ .) Here we can clearly see how the distributions for East Asia, Latin America and others shift markedly to the right. While Sub-Saharan Africa remains stagnant. Notice that we order the levels of the group so that the West’s density are plotted first, then Sub-Saharan Africa. Having the two extremes plotted first allows us see the remaining bimodality better. Weighted densities As a final point, we note that these distributions weigh every country the same. So if most of the population is improving, but living in a very large country, such as China, we might not appreciate this. We can actually weight the smooth densities using the weight mapping argument. The plot then looks like this: This particular figure shows very clearly how the income distribution gap is closing with most of the poor remaining in Sub-Saharan Africa. 21.10 Ecological fallacy Throughout this section we have been comparing regions of the world. We have seen that, on average, some regions do better than others. In this section, we focus on describing the importance of variability within the groups when examining the relationship between a country’s infant mortality rates and average income. We start by comparing these quantities across regions but before doing this we define a few more regions: gapminder &lt;- gapminder %&gt;% mutate(group = case_when( .$region %in% west ~ &quot;The West&quot;, .$region %in% &quot;Northern Africa&quot; ~ &quot;Northern Africa&quot;, .$region %in% c(&quot;Eastern Asia&quot;, &quot;South-Eastern Asia&quot;) ~ &quot;East Asia&quot;, .$region == &quot;Southern Asia&quot;~ &quot;Southern Asia&quot;, .$region %in% c(&quot;Central America&quot;, &quot;South America&quot;, &quot;Caribbean&quot;) ~ &quot;Latin America&quot;, .$continent == &quot;Africa&quot; &amp; .$region != &quot;Northern Africa&quot; ~ &quot;Sub-Saharan Africa&quot;, .$region %in% c(&quot;Melanesia&quot;, &quot;Micronesia&quot;, &quot;Polynesia&quot;) ~ &quot;Pacific Islands&quot;)) We then compute these quantities for each region: surv_income &lt;- gapminder %&gt;% filter(year %in% present_year &amp; !is.na(gdp) &amp; !is.na(infant_mortality) &amp; !is.na(group)) %&gt;% group_by(group) %&gt;% summarize(income = sum(gdp)/sum(population)/365, infant_survival_rate = 1-sum(infant_mortality/1000*population)/sum(population)) surv_income %&gt;% arrange(income) #&gt; # A tibble: 7 x 3 #&gt; group income infant_survival_rate #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Sub-Saharan Africa 1.76 0.936 #&gt; 2 Southern Asia 2.07 0.952 #&gt; 3 Pacific Islands 2.70 0.956 #&gt; 4 Northern Africa 4.94 0.970 #&gt; 5 Latin America 13.24 0.983 #&gt; 6 East Asia 13.44 0.985 #&gt; # ... with 1 more rows This shows a dramatic difference. While in the West less than 0.5% of infants die, in Sub-Saharan Africa the rate is higher than 6%! The relationship between these two variables is almost perfectly linear: In this plot we introduce the use of the limit argument which lets us change the range of the axes. We are making the range larger than the data requires because we will later compare this plot to one with more variability and we want the ranges to be the same. We also introduce the breaks argument which lets us set the location of the axes labels. Finally, we introduce a new transformation, the logistic transformation. Logistic transformation The logistic or logit transformation for a proportion or rate \\(p\\) is defined as: \\[f(p) = \\log \\left( \\frac{p}{1-p} \\right)\\] When \\(p\\) is a proportion or probability, the quantity that is being logged, \\(p/(1-p)\\) is called the odds. In this case \\(p\\) is the proportion of infants that survived. The odds tell us how many more infants are expected to survive than to die. The log transformation makes this symmetric. If the rates are the same, then the log odds is 0. Fold increases or decreases turn into positive and negative increments respectively. This scale is useful when we want to highlight differences near 0 or 1. For survival rates this is important because a survival rate of 90% is unacceptable, while a survival of 99% is relatively good. We would much prefer a survival rate closer to 99.9%. We want our scale to highlight these difference and the logit does this. Note that 99.9/0.1 is about 10 times bigger than 99/1 which is about 10 times larger than 90/10. And by using the log these fold changes turn into constant increases. Show the data Now, back to our plot. Based on the plot above, do we conclude that a country with a low income is destined to have low survival rate? Do we conclude that all survival rates in Sub-Saharan Africa are all lower than in Southern Asia which in turn are lower than in the Pacific Islands, and so on? Jumping to this conclusion based on a plot showing averages is referred to as the ecological fallacy. The almost perfect relationship between survival rates and income is only observed for the averages at the region level. Once we show all the data, we see a somewhat more complicated story: Specifically, we see that there is a large amount of variability. We see that countries from the same regions can be quite different and that countries with the same income can have different survival rates. For example, while on average Sub-Saharan Africa had the worse health and economic outcomes, there is wide variability within that group. Mauritius and Botswana are doing better than Angola and Sierra Leone with Mauritius comparable to Western countries. "],
["data-visualization-principles.html", "Chapter 22 Data visualization principles 22.1 Encoding data using visual cues 22.2 Know when to include 0 22.3 Do not distort quantities 22.4 Order by a meaningful value 22.5 Show the data 22.6 Ease comparisons: use common axes 22.7 Ease comparisons: align plots vertically to see horizontal changes and horizontally to see vertical changes 22.8 Consider transformations 22.9 Ease comparisons: Visual cues to be compared should be adjacent. 22.10 Ease comparison: use color 22.11 Think of the color blind 22.12 Use scatter plots to examine the relationship between two variables 22.13 Encoding a third variable 22.14 Avoid pseudo three dimensional plots 22.15 Avoid gratuitous three dimensional plots 22.16 Avoid too many significant digits 22.17 Further reading: Exercises", " Chapter 22 Data visualization principles We have already provided some rules to follow as we created plots for our examples. Here we aim to provide some general principles we can use as a guide for effective data visualization. Much of this section is based on a talk by Karl Broman titled “Creating effective figures and tables” including some of the figures which were made with code that Karl makes available on his GitHub repository, and class notes from Peter Aldhous’ Introduction to Data Visualization course. Following Karl’s approach, we show some examples of plot styles we should avoid, explain how to improve them, and use these as motivation for a list of principles. We compare and contrast plots that follow these principles to those that don’t. The principles are mostly based on research related to how humans detect patterns and make visual comparisons. The preferred approaches are those that best fit the way our brains process visual information. When deciding on a visualization approach it is also important to keep our goal in mind. We may be comparing a viewable number of quantities, describing distribution for categories or numeric values, comparing the data from two groups, or describing the relationship between two variables. As a final note, we want to emphasize that for a data scientist it is important to adapt and optimize graphs to the audience. For example, an exploratory plot made for ourselves will be different than a chart intended to communicate a finding to a general audience. We will be using these libraries: library(tidyverse) library(gridExtra) library(dslabs) 22.1 Encoding data using visual cues We start by describing some principles for encoding data. There are several approaches at our disposal including position, aligned lengths, angles, area, brightness, and color hue. To illustrate how some of these strategies compare, let’s suppose we want to report the results from two hypothetical polls regarding browser preference taken in 2000 and then 2015. Here, for each year, we are simply comparing four quantities – the four percentages. A widely used graphical representation of percentages, popularized by Microsoft Excel, is the pie chart: Figure 22.1: Pie chart of browser usage. Here we are representing quantities with both areas and angles since both the angle and area of each pie slice is proportional to the quantity it represents. This turns out to be a suboptimal choice since, as demonstrated by perception studies, humans are not good at precisely quantifying angles and are even worse when only area is the only available visual cue. The donut chart is an example of a plot that uses only area: Figure 22.2: Pie chart of browser usage. To see how hard it is to quantify angles and area, note that the rankings and all the percentages in the plots above changed from 2000 to 2015. Can you determine the actual percentages and rank the browsers’ popularity? Can you see how the percentages changed from 2000 to 2015? It is not easy to tell from the plot. In fact, the pie R function help file states that: “Pie charts are a very bad way of displaying information. The eye is good at judging linear measures and bad at judging relative areas. A bar chart or dot chart is a preferable way of displaying this type of data. In this case, simply showing the numbers is not only clearer, but would also save on printing costs if printing a paper copy. Browser 2000 2015 Opera 3 2 Safari 21 22 Firefox 23 21 Chrome 26 29 IE 28 27 The preferred way to plot these quantities is to use length and position as visual cues since humans are much better at judging linear measures. The bar plot uses this approach by using bars of length proportional to the quantities of interest. By adding horizontal lines at strategically chosen values, in this case at every multiple of 10, we ease the visual burden of quantifying through the position of the top of the bars. Compare and contrast the information we can extract from the two figures. Figure 22.3: Barplot of browser usage. Notice how much easier it is to see the differences in the bar plot. In fact, we can now determine the actual percentages by following a horizontal line to the x-axis. If for some reason you need to make a pie chart, label each pie slice with its respective percentage so viewers do not have to infer them from the angles or area: In general, when displaying quantities, position and length are preferred over angles and/or area. Brightness and color are even harder to quantify than angles. But, as we will see later, they are sometimes useful when more than two dimensions must be displayed at once. 22.2 Know when to include 0 When using bar plots it is dishonest not to start the bars at 0. This is because, by using a bar plot, we are implying the length is proportional to the quantities being displayed. By avoiding 0, relatively small differences can be made to look much bigger than they actually are. This approach is often used by politicians or media organizations trying to exaggerate a difference. Below is an illustrative example: (Source: Fox News, via Peter Aldhous via Media Matters via Fox News) via Media Matters. From the plot above, it appears that apprehensions have almost tripled when, in fact, they have only increased by about 16%. Starting the graph at 0 illustrates this clearly: Here is another example, described in detail: here. which makes a 13% increase look like a five fold change. Here is the appropriate plot: When using position rather than length, then it is not necessary to include 0. This is particularly the case when we want to compare differences between groups relative to the within the group variability. Here is an illustrative example showing country average life expectancy stratified across continents in 2012: p1 &lt;- gapminder %&gt;% filter(year == 2012) %&gt;% ggplot(aes(continent, life_expectancy)) + geom_point() p2 &lt;- p1 + scale_y_continuous(limits = c(0, 84)) grid.arrange(p2, p1, ncol = 2) Note that in the plot on the left, which includes 0, the space between 0 and 43 adds no information and makes it harder to compare the between and within group variability. 22.3 Do not distort quantities During President Barack Obama’s 2011 State of the Union Address the following chart was used to compare the US GDP to the GDP of four competing nations: Judging by the area of the circles, the US appears to have an economy over five times larger than China’s and over 30 times larger than France’s. However, if we look at the actual numbers, we see that this is not the case. The actual ratios are 2.6 and 5.8 times bigger than China and France respectively. The reason for this distortion is that the radius, rather than the area, was made to be proportional to the quantity. which implies that the proportion between the areas is squared: 2.6 turns into 6.5 and 5.8 turns into 34.1. Here is a comparison of the circles we get if we make the value proportional to the radius and to the area: Not surprisingly, ggplot defaults to using area rather than radius. Of course, in this case, we really should not be using area at all since we can use position and length: 22.4 Order by a meaningful value When one of the axes is used to show categories, as is done in bar plots, the default ggplot behavior is to order the categories alphabetically when they are defined by character strings. If they are defined by factors, they are ordered by the factor levels. We rarely want to use alphabetical order. Instead we should order by a meaningful quantity. In all the cases above, the bar plots where ordered by the values being displayed. The exception was the graph showing bar plots comparing browsers. In this case we kept the order the same across the bar plots to ease the comparison. Specifically instead of ordering the browsers separately in the two years, we ordered both years by the average value of 2000 and 2015. We previously learned how to use the reorder function, which helps us achieve this goal. To appreciate how the right order can help convey a message, suppose we want to create a plot to compare the murder rate across states. We are particularly interested in the most dangerous and safest states. Note the difference when we order alphabetically (the default) versus when we order by the actual rate: data(murders) p1 &lt;- murders %&gt;% mutate(murder_rate = total / population * 100000) %&gt;% ggplot(aes(state, murder_rate)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + xlab(&quot;&quot;) p2 &lt;- murders %&gt;% mutate(murder_rate = total / population * 100000) %&gt;% mutate(state = reorder(state, murder_rate)) %&gt;% ggplot(aes(state, murder_rate)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() + xlab(&quot;&quot;) grid.arrange(p1, p2, ncol = 2) The reorder function lets us reorder groups as well. Earlier we saw an example related to income distributions across regions. Here are the two versions plotted against each other: The first orders the regions alphabetically while the second orders them by the group’s median. 22.5 Show the data We have focused on displaying single quantities across categories. We now shift our attention to displaying data, with a focus on comparing groups. To motivate our first principle, ‘show the data’, we go back to our artificial example of describing heights to ET, an extraterrestrial. This time let’s assume ET is interested in the difference in heights between males and females. A commonly seen plot used for comparisons between groups, popularized by software such as Microsoft Excel, shows the average and standard errors (standard errors are defined in a later chapter, but do not confuse them with the standard deviation of the data). The plot looks like this: The average of each group is represented by the top of each bar and the antennae extend out from the average to the average plus two standard errors. If all ET receives is this plot, he will have little information on what to expect if he meets a group of human males and females. The bars go to 0, does this mean there are tiny humans measuring less than one foot? Are all males taller than the tallest females? Is there a range of heights? ET can’t answer these questions since we have provided almost no information on the height distribution. This brings us to our first principle: show the data. This simple ggplot2 code already generates a more informative plot than the bar plot by simply showing all the data points: heights %&gt;% ggplot(aes(sex, height)) + geom_point() For example, this plot gives us an idea of the range of the data. However, this plot has limitations as well since we can’t really see all the 238 and 812 points plotted for females and males respectively, and many points are plotted on top of each other. As we have previously described, visualizing the distribution is much more informative. But before doing this, we point out two ways we can improve a plot showing all the points. The first is to add jitter, which adds a small random shift to each point. In this case adding horizontal jitter does not alter the interpretation, since the height of the points do not change, but we minimize the number of points that fall on top of each other and therefore get a better visual sense of how the data is distributed. A second improvement comes from using alpha blending: making the points somewhat transparent. The more points fall on top of each other, the darker the plot, which also helps us get a sense of how the points are distributed. Here is the same plot with jitter and alpha blending: heights %&gt;% ggplot(aes(sex, height)) + geom_jitter(width = 0.1, alpha = 0.2) Now we start getting a sense that, on average, males are taller than females. We also note dark horizontal bands of points, demonstrating that many report values that are rounded to the nearest integer. 22.6 Ease comparisons: use common axes Since there are so many points, it is more effective to show distributions rather than individual points. We therefore show histograms for each group: However, from this plot it is not immediately obvious that males are, on average, taller than females. We have to look carefully to notice that the x-axis has a higher range of values in the male histogram. An important principle here is to keep the axes the same when comparing data across to plots. Note how the comparison becomes easier: 22.7 Ease comparisons: align plots vertically to see horizontal changes and horizontally to see vertical changes In these histograms, the visual cue related to decreases or increases in height are shifts to the left or right respectively: horizontal changes. Aligning the plots vertically helps us see this change when the axis are fixed: p2 &lt;- heights %&gt;% ggplot(aes(height, ..density..)) + geom_histogram(binwidth = 1, color=&quot;black&quot;) + facet_grid(sex~.) p2 This plot makes it much easier to notice that men are, on average, taller. If instead of histograms we want the more compact summary provided by box plots, then we align them horizontally since, by default, box plots move up and down with changes in height. Following our show the data principle we then overlay all the data points: p3 &lt;- heights %&gt;% ggplot(aes(sex, height)) + geom_boxplot(coef=3) + geom_jitter(width = 0.1, alpha = 0.2) + ylab(&quot;Height in inches&quot;) p3 Now contrast and compare these three plots, based on exactly the same data: grid.arrange(p1, p2, p3, ncol = 3) Notice how much more we learn from the two plots on the right. Bar plots are useful for showing one number, but not very useful when we want to describe distributions. 22.8 Consider transformations We have motivated the use of the log transformation in cases were the changes are multiplicative. Population size was an example in which we found a log transformation to yield a more informative transformation. The combination of an incorrectly chosen bar plot and a failure to use a log transformation when one is merited can be particularly distorting. As an example consider this bar plot showing the average population sizes for each continent in 2015: From this plot one would conclude that countries in Asia are much more populous than in other continents. Following the show the data principle we quickly notice that this is due to two very large countries, which we assume are India and China: Here, using a log transformation provides a much more informative plot. We compare the original bar plot to a box plot using the log scale transformation for the y-axis: With the new plot we realize that countries in Africa actually have a larger median population size than those in Asia. Other transformations you should consider are the logistic transformation, useful to better see fold changes in odds, and the square root transformation, useful for count data. 22.9 Ease comparisons: Visual cues to be compared should be adjacent. When comparing income data across regions between 1970 and 2010 we made a figure similar to the one below. A difference is that here we look at continents instead of regions, but this is not relevant to the point we are making. For each continent we want to compare the distributions from 1970 to 2010. The default in ggplot2 is to order labels alphabetically so the labels with 1970 come before the labels with 2010, making the comparisons challenging. But it is much easier to make the comparison when the box plots are next to each other: 22.10 Ease comparison: use color The comparison becomes even easier to make if we use color to denote the two things we want to compare: 22.11 Think of the color blind About 10% of the population is color blind. Unfortunately, the default colors used in ggplot are not optimal for this group. However, ggplot does it make it easy to change the color palette used in the plots. An example of how we can use a color blind friendly palette is described here: color_blind_friendly_cols &lt;- c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;, &quot;#F0E442&quot;, &quot;#0072B2&quot;, &quot;#D55E00&quot;, &quot;#CC79A7&quot;) p1 &lt;- data.frame(x=1:8, y=1:8, col = as.character(1:8)) %&gt;% ggplot(aes(x, y, color = col)) + geom_point(size=5) p1 + scale_color_manual(values=color_blind_friendly_cols) There are several resources that can help you select colors, for example this one. 22.12 Use scatter plots to examine the relationship between two variables In every single instance in which we have examined the relationship between two variables, including total murders versus population size, life expectancy versus fertility rates, and infant mortality versus income, we have used scatter plots. This is the plot we generally recommend. 22.12.1 Slope charts One exception where another type of plot may be more informative is when you are comparing variables of the same type but at different time points and for a relatively small number of comparisons. For example, comparing life expectancy between 2010 and 2015. In this case we might recommend a slope chart. There is not geometry for slope charts in ggplot2 but we can construct one using geom_lines. We need to do some tinkering to add labels. Here is an example comparing 2010 to 2015 for large western countries: west &lt;- c(&quot;Western Europe&quot;,&quot;Northern Europe&quot;,&quot;Southern Europe&quot;, &quot;Northern America&quot;,&quot;Australia and New Zealand&quot;) dat &lt;- gapminder %&gt;% filter(year%in% c(2010, 2015) &amp; region %in% west &amp; !is.na(life_expectancy) &amp; population &gt; 10^7) dat %&gt;% mutate(location = ifelse(year == 2010, 1, 2), location = ifelse(year == 2015 &amp; country %in% c(&quot;United Kingdom&quot;,&quot;Portugal&quot;), location+0.22, location), hjust = ifelse(year == 2010, 1, 0)) %&gt;% mutate(year = as.factor(year)) %&gt;% ggplot(aes(year, life_expectancy, group = country)) + geom_line(aes(color = country), show.legend = FALSE) + geom_text(aes(x = location, label = country, hjust = hjust), show.legend = FALSE) + xlab(&quot;&quot;) + ylab(&quot;Life Expectancy&quot;) An advantage of the slope chart is that it permits us to quickly get an idea of changes based on the slope of the lines. Although we are using angle as the visual cue, we also have position to determine the exact values. Comparing the improvements is a bit harder with a scatter plot: In the scatter plot we have followed the principle use common axes since we are comparing these before and after. However, if we have many points, slope charts stop being useful as it becomes hard to see all the lines. 22.12.2 Bland-Altman plot Since we are primarily interested in the difference, it makes sense to dedicate one of our axes to it. The Bland-Altman plot, also know as the Tukey mean-difference plot and the MA-plot, shows the difference versus the average: library(ggrepel) dat %&gt;% mutate(year = paste0(&quot;life_expectancy_&quot;, year)) %&gt;% select(country, year, life_expectancy) %&gt;% spread(year, life_expectancy) %&gt;% mutate(average = (life_expectancy_2015 + life_expectancy_2010)/2, difference = life_expectancy_2015 - life_expectancy_2010) %&gt;% ggplot(aes(average, difference, label = country)) + geom_point() + geom_text_repel() + geom_abline(lty = 2) + xlab(&quot;Average of 2010 and 2015&quot;) + ylab(&quot;Difference between 2015 and 2010&quot;) Here, by simply looking at the y-axes, we quickly see which countries have shown the most improvement. We also get an idea of the overall value from the x-axis. 22.13 Encoding a third variable An earlier scatter plot showed the relationship between infant survival and average income. The following is a version of this plot that encodes three variables: OPEC membership, region, and population We encode categorical variables with color hue and shape. These shapes can be controlled with shape argument. Below are the shapes available for use in R. For the last five, the color goes inside. For continuous variables we can use color, intensity or size. We now show an example of how we do this with a case study. When choosing colors to quantify a numeric variable, we chose between two options sequential and diverging. Sequential colors are suited for data that goes from high to low. High values are clearly distinguished from low values. Here are some examples offered by the package RColorBrewer library(RColorBrewer) display.brewer.all(type=&quot;seq&quot;) Diverging colors are used to represent values that diverge from a center. We put equal emphasis on both ends of the data range: higher than the center and lower than the center. An example of when we would use a divergent pattern would be if we were to show height in standard deviations away from the average. Here are some examples of divergent patterns: library(RColorBrewer) display.brewer.all(type=&quot;div&quot;) 22.14 Avoid pseudo three dimensional plots The figure below, taken from the scientific literature shows three variables: dose, drug type and survival. Although your screen/book page is flat and two dimensional, the plot tries to imitate three dimensions and assigned a dimension to each variable. Humans are not good at seeing in three dimensions (which explains why it is hard to parallel park) and our limitation is even worse with regard to pseudo-three-dimensions. To see this, try to determine the values of the survival variable in the plot above. Can you tell when the purple ribbon intersects the red one? This is an example in which we can easily use color to represent the categorical variable instead of using a pseude-3D: Figure 22.4: This plot demonstrates that using color is more than enough to distinguish the three lines. Note how much easier it is to determine the survival values. 22.15 Avoid gratuitous three dimensional plots Pseudo 3D is sometimes used completely gratuitously: plots are made to look 3D even when the 3rd dimension does not represent a quantity. This only adds confusion and makes it harder to relay your message. Here are two examples: 22.16 Avoid too many significant digits By default, statistical software like R returns many significant digits. The default behavior in R is to show 7 significant digits. That many digits often adds no information, and the added the visual clutter can make it hard for the viewer to understand the message. As an example here are the per 10,000 disease rates for California across the five decades state year Measles Pertussis Polio California 1940 37.8826320 18.3397861 18.3397861 California 1950 13.9124205 4.7467350 4.7467350 California 1960 14.1386471 0.0000000 0.0000000 California 1970 0.9767889 0.0000000 0.0000000 California 1980 0.3743467 0.0515466 0.0515466 We are reporting precision up to 0.00001 cases per 10,000, a very small value in the context of the changes that are occurring across the dates. In this case 2 significant figures is more than enough and clearly makes the point that rates are decreasing: state year Measles Pertussis Polio California 1940 37.9 18.3 18.3 California 1950 13.9 4.7 4.7 California 1960 14.1 0.0 0.0 California 1970 1.0 0.0 0.0 California 1980 0.4 0.1 0.1 Useful ways to change the number of significant digits or to round numbers are signif and round. You can define the number of significant digits globally by setting options like this: options(digits = 3). Another principle, related to displaying tables, is to place values being compared on columns rather than rows. Note that our table above is easier to read than this one: state disease 1940 1950 1960 1970 1980 California Measles 37.9 13.9 14.1 1 0.4 California Pertussis 18.3 4.7 0.0 0 0.1 California Polio 18.3 4.7 0.0 0 0.1 ## Know your audience Graphs can be used for our 1) own exploratory data analysis, 2) to convey a message to experts, or 3) to help tell a story to a general audience. Make sure that the intended audience understands each element of the plot. As a simple example, consider that for your own exploration, it may be more useful to log-transform data and then plot it. However, for a general audience that is unfamiliar with converting logged values back to the original measurements, using a log-scale for the axis will be much easier to digest. 22.17 Further reading: ER Tufte (1983) The visual display of quantitative information. Graphics Press. ER Tufte (1990) Envisioning information. Graphics Press. ER Tufte (1997) Visual explanations. Graphics Press. WS Cleveland (1993) Visualizing data. Hobart Press. WS Cleveland (1994) The elements of graphing data. CRC Press. A Gelman, C Pasarica, R Dodhia (2002) Let’s practice what we preach: Turning tables into graphs. The American Statistician 56:121-130. NB Robbins (2004) Creating more effective graphs. Wiley. Nature Methods columns A Cairo (2013) The Functional Art: An Introduction to Information Graphics and Visualization. New Riders N Yau (2013) Data Points: Visualization That Means Something. Wiley Exercises For these exercises we will be using the vaccines data in the dslabs package: library(dslabs) data(us_contagious_diseases) Pie charts are appropriate: A. When we want to display percentages. B. When ggplot2 is not available. C. When I am in a bakery. D. Never. Barplots and tables are always better. What is the problem with the plot below: A. The values are wrong. The final vote was 306 to 232. B. The axis does not start at 0. Judging by the length, it appears Trump received 3 times as many votes when in fact it was about 30% more. C. The colors should be the same. D. Percentages should be shown as a pie chart. Take a look at the following two plots. They show the same information: 1928 rates of Measles across the 50 states. Which plot is easier to read if you are interested in determining which are the best and worst states in terms of rates and why? A. They provide the same information so they are both equally as good. B. The plot on the right is better because it orders the states alphabetically. C. The plot on the right is better because alphabetical order has nothing to do with the disease and by ordering according to actual rate, we quickly see the states with most and least rates. D. Both plots should be a pie chart. To make the plot on the left, we have to reorder the levels of the states’ variables. dat &lt;- us_contagious_diseases %&gt;% filter(year == 1967 &amp; disease==&quot;Measles&quot; &amp; !is.na(population)) %&gt;% mutate(rate = count / population * 10000 * 52 / weeks_reporting) Note what happens when we make a bar plot: dat %&gt;% ggplot(aes(state, rate)) + geom_bar(stat=&quot;identity&quot;) + coord_flip() Define these objects: state &lt;- dat$state rate &lt;- dat$count/dat$population*10000*52/dat$weeks_reporting Redefine the state object so that the levels are re-ordered. Print the new object state and its levels so you can see that the vector is not re-ordered by the levels. Now with one line of code, define the dat table as done above, but change the use mutate to create a rate variable and reorder state variable so that the levels are reordered by this variable. Then make a bar plot using the code above, but for this new dat. Say we are interested in comparing gun homicide rates across regions of the US. We see this plot: library(dslabs) data(&quot;murders&quot;) murders %&gt;% mutate(rate = total/population*100000) %&gt;% group_by(region) %&gt;% summarize(avg = mean(rate)) %&gt;% mutate(region = factor(region)) %&gt;% ggplot(aes(region, avg)) + geom_bar(stat=&quot;identity&quot;) + ylab(&quot;Murder Rate Average&quot;) and decide to move to a state in the western region. What is the main problem with this interpretaion? A. The categories are ordered alphabetically. B. The graph does not show standard errors. C. It does not show all the data. We do not see the variability within a region and it’s possible that the safest states are not in the West. D. The Northeast has the lowest average. Answer C Make a box plot of the murder rates. data(&quot;murders&quot;) murders %&gt;% mutate(rate = total/population*100000) #&gt; state abb region population total rate #&gt; 1 Alabama AL South 4779736 135 2.824 #&gt; 2 Alaska AK West 710231 19 2.675 #&gt; 3 Arizona AZ West 6392017 232 3.630 #&gt; 4 Arkansas AR South 2915918 93 3.189 #&gt; 5 California CA West 37253956 1257 3.374 #&gt; 6 Colorado CO West 5029196 65 1.292 #&gt; 7 Connecticut CT Northeast 3574097 97 2.714 #&gt; 8 Delaware DE South 897934 38 4.232 #&gt; 9 District of Columbia DC South 601723 99 16.453 #&gt; 10 Florida FL South 19687653 669 3.398 #&gt; 11 Georgia GA South 9920000 376 3.790 #&gt; 12 Hawaii HI West 1360301 7 0.515 #&gt; 13 Idaho ID West 1567582 12 0.766 #&gt; 14 Illinois IL North Central 12830632 364 2.837 #&gt; 15 Indiana IN North Central 6483802 142 2.190 #&gt; 16 Iowa IA North Central 3046355 21 0.689 #&gt; 17 Kansas KS North Central 2853118 63 2.208 #&gt; 18 Kentucky KY South 4339367 116 2.673 #&gt; 19 Louisiana LA South 4533372 351 7.743 #&gt; 20 Maine ME Northeast 1328361 11 0.828 #&gt; 21 Maryland MD South 5773552 293 5.075 #&gt; 22 Massachusetts MA Northeast 6547629 118 1.802 #&gt; 23 Michigan MI North Central 9883640 413 4.179 #&gt; 24 Minnesota MN North Central 5303925 53 0.999 #&gt; 25 Mississippi MS South 2967297 120 4.044 #&gt; 26 Missouri MO North Central 5988927 321 5.360 #&gt; 27 Montana MT West 989415 12 1.213 #&gt; 28 Nebraska NE North Central 1826341 32 1.752 #&gt; 29 Nevada NV West 2700551 84 3.110 #&gt; 30 New Hampshire NH Northeast 1316470 5 0.380 #&gt; 31 New Jersey NJ Northeast 8791894 246 2.798 #&gt; 32 New Mexico NM West 2059179 67 3.254 #&gt; 33 New York NY Northeast 19378102 517 2.668 #&gt; 34 North Carolina NC South 9535483 286 2.999 #&gt; 35 North Dakota ND North Central 672591 4 0.595 #&gt; 36 Ohio OH North Central 11536504 310 2.687 #&gt; 37 Oklahoma OK South 3751351 111 2.959 #&gt; 38 Oregon OR West 3831074 36 0.940 #&gt; 39 Pennsylvania PA Northeast 12702379 457 3.598 #&gt; 40 Rhode Island RI Northeast 1052567 16 1.520 #&gt; 41 South Carolina SC South 4625364 207 4.475 #&gt; 42 South Dakota SD North Central 814180 8 0.983 #&gt; 43 Tennessee TN South 6346105 219 3.451 #&gt; 44 Texas TX South 25145561 805 3.201 #&gt; 45 Utah UT West 2763885 22 0.796 #&gt; 46 Vermont VT Northeast 625741 2 0.320 #&gt; 47 Virginia VA South 8001024 250 3.125 #&gt; 48 Washington WA West 6724540 93 1.383 #&gt; 49 West Virginia WV South 1852994 27 1.457 #&gt; 50 Wisconsin WI North Central 5686986 97 1.706 #&gt; 51 Wyoming WY West 563626 5 0.887 by region, showing all the points and ordering the regions by their median rate. The plots below shows the for three continuous variables. The line \\(x=2\\) appears to separate the points. But it is actually not the case, which we can see by plotting the data in a couple of two dimensinal points. Why is this happening? A. Humans are not good at reading pseudo 3D plots. B. There must be an error in the code C. The colors confuse us. D. Scatter plots should not be used to compare two variables when we have access to 3. Reproduce the image plot we previously made but for Smallpox. For this plot do not include years in which cases were not reported in 10 or more weeks Now reproduce the time series plot we previously made, but this time following the instructions of the previous question. For the state of California, make a time series plots showing rates for all diseases. Include only years with 10 or more weeks reporting. Use a different color for each disease. Now do the same for the rates for the US. Hint: compute the US rate by using summarize: the total dividec by total population. "],
["case-study-the-impact-of-vaccines-on-battling-infectious-diseases.html", "Chapter 23 Case study: the impact of vaccines on battling infectious diseases", " Chapter 23 Case study: the impact of vaccines on battling infectious diseases Vaccines have helped save millions of lives. In the 19th century, before herd immunization was achieved through vaccination programs, deaths from infectious diseases, such as smallpox and polio, were common. However, today, despite all the scientific evidence for their importance, vaccination programs have become somewhat controversial. The controversy started with a paper published in 1988 and lead by Andrew Wakefield claiming there was a link between the administration of the measles, mumps and rubella (MMR) vaccine, and the appearance of autism and bowel disease. Despite much scientific evidence contradicting this finding, sensationalist media reports and fear mongering from conspiracy theorists led parts of the public into believing that vaccines were harmful. As a result, many parents ceased to vaccinate their children. This dangerous practice can be potentially disastrous given that the Center for Disease Control (CDC) estimates that vaccinations will prevent more than 21 million hospitalizations and 732,000 deaths among children born in the last 20 years (see Benefits from Immunization during the Vaccines for Children Program Era — United States, 1994-2013, MMWR). The 1988 paper has since been retracted and Andrew Wakefield was eventually “struck off the UK medical register, with a statement identifying deliberate falsification in the research published in The Lancet, and was thereby barred from practicing medicine in the UK.” (source: Wikipedia). Yet misconceptions persist, in part due to self-proclaimed activists who continue to disseminate misinformation about vaccines. Effective communication of data is a strong antidote to misinformation and fear mongering. Earlier we showed an example provided by a Wall Street Journal article showing data related to the impact of vaccines on battling infectious diseases. Here we reconstruct that example. The data used for these plots were collected, organized and distributed by the Tycho Project. They include weekly reported counts data for seven diseases from 1928 to 2011, from all fifty states. We include the yearly totals in the dslabs package: data(us_contagious_diseases) str(us_contagious_diseases) #&gt; &#39;data.frame&#39;: 18870 obs. of 6 variables: #&gt; $ disease : Factor w/ 7 levels &quot;Hepatitis A&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ state : Factor w/ 51 levels &quot;Alabama&quot;,&quot;Alaska&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... #&gt; $ year : num 1966 1967 1968 1969 1970 ... #&gt; $ weeks_reporting: int 50 49 52 49 51 51 45 45 45 46 ... #&gt; $ count : num 321 291 314 380 413 378 342 467 244 286 ... #&gt; $ population : num 3345787 3364130 3386068 3412450 3444165 ... We create a temporary object dat that stores only the measles data, includes a per 100,000 rate, orders states by average value of disease and removes Alaska and Hawaii since they only became states in the late 50s. Note that there is a weeks_reporting column that tells us how many weeks reported cases. So we have to adjust for that when computing the rate. the_disease &lt;- &quot;Measles&quot; dat &lt;- us_contagious_diseases %&gt;% filter(!state%in%c(&quot;Hawaii&quot;,&quot;Alaska&quot;) &amp; disease == the_disease) %&gt;% mutate(rate = count / population * 10000 * 52 / weeks_reporting) %&gt;% mutate(state = reorder(state, rate)) We can now easily plot disease rates per year. Here are the measles data from California: dat %&gt;% filter(state == &quot;California&quot; &amp; !is.na(rate)) %&gt;% ggplot(aes(year, rate)) + geom_line() + ylab(&quot;Cases per 10,000&quot;) + geom_vline(xintercept=1963, col = &quot;blue&quot;) We add a vertical line at 1963 since this is when the vaccine was introduced [Control, Centers for Disease; Prevention (2014). CDC health information for international travel 2014 the yellow book. p. 250. ISBN 9780199948505]. Now, can we show data for all states in one plot? We have three variables to show: year, state and rate. In the WSJ figure, they use the x-axis for year, the y-axis for state and color hue to represent rates. However, the color scale they use, which goes from yellow to blue to green to orange to red can be improved. In our example we want to use a sequential palette since there is no meaningful center, just low and high rates. We use the geometry geom_tile to tile the region with colors representing disease rates. We use a square root transformation to avoid having the really high counts dominate the plot. Notice that missing values are shown in grey. Once the disease was pretty much erradicated some states stopped reporting cases all together. dat %&gt;% ggplot(aes(year, state, fill = rate)) + geom_tile(color = &quot;grey50&quot;) + scale_x_continuous(expand=c(0,0)) + scale_fill_gradientn(colors = brewer.pal(9, &quot;Reds&quot;), trans = &quot;sqrt&quot;) + geom_vline(xintercept=1963, col = &quot;blue&quot;) + theme_minimal() + theme(panel.grid = element_blank()) + ggtitle(the_disease) + ylab(&quot;&quot;) + xlab(&quot;&quot;) This plot makes a very striking argument for the contribution of vaccines. However, one limitation of this plot is that it uses color to represent quantity which we earlier explained makes it harder to know exactly how high it is going. Position and lengths are better cues. If we are willing to lose state information, we can make a version of the plot that shows the values with position. We can also show the average for the US which we compute like this: avg &lt;- us_contagious_diseases %&gt;% filter(disease==the_disease) %&gt;% group_by(year) %&gt;% summarize(us_rate = sum(count, na.rm=TRUE)/sum(population, na.rm=TRUE)*10000) Now to make the plot we simply use the geom_line geometry: dat %&gt;% ggplot() + geom_line(aes(year, rate, group = state), color = &quot;grey50&quot;, show.legend = FALSE, alpha = 0.2, size = 1) + geom_line(mapping = aes(year, us_rate), data = avg, size = 1, color = &quot;black&quot;) + scale_y_continuous(trans = &quot;sqrt&quot;, breaks = c(5,25,125,300)) + ggtitle(&quot;Cases per 10,000 by state&quot;) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + geom_text(data = data.frame(x=1955, y=50), mapping = aes(x, y, label=&quot;US average&quot;), color=&quot;black&quot;) + geom_vline(xintercept=1963, col = &quot;blue&quot;) #&gt; Warning: Removed 180 rows containing missing values (geom_path). In theory we could use color to represent the categorical value state, but it is hard to pick 50 distinct colors. "]
]
